import csv
import io
import datetime
import logging
import re
import threading
from pathlib import Path
from typing import Optional
from django.conf import settings
from django.db import transaction, connection
from django.utils import timezone

from .models import Subscriber, ImportHistory, ImportError

def _create_temp_table(temp_table_name):
    """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å —Ç–æ–π –∂–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π, —á—Ç–æ –∏ –æ—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ subscribers_subscriber"""
    logger.info(f"üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã: {temp_table_name}")
    with connection.cursor() as cursor:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Ç–æ—á–Ω–æ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute(f"""
            CREATE TABLE {temp_table_name} (
                id SERIAL PRIMARY KEY,
                original_id INTEGER,
                number VARCHAR(20),
                last_name VARCHAR(100),
                first_name VARCHAR(100),
                middle_name VARCHAR(100),
                address TEXT,
                memo1 VARCHAR(255),
                memo2 VARCHAR(255),
                birth_place VARCHAR(255),
                birth_date DATE,
                imsi VARCHAR(50),
                gender VARCHAR(1),
                email VARCHAR(254),
                is_active BOOLEAN,
                created_at TIMESTAMP WITH TIME ZONE,
                updated_at TIMESTAMP WITH TIME ZONE,
                import_history_id INTEGER
            )
        """)
    logger.info(f"‚úÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ {temp_table_name} —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    return temp_table_name

def _insert_into_temp_table(temp_table_name, record_data):
    """–í—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É"""
    logger.debug(f"üì• –í—Å—Ç–∞–≤–∫–∞ –∑–∞–ø–∏—Å–∏ ID={record_data['original_id']} –≤ {temp_table_name}")
    with connection.cursor() as cursor:
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ - –æ–±—Ä–µ–∑–∞–µ–º –≤—Å–µ –ø–æ–ª—è –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
        safe_data = [
            record_data['original_id'],
            (record_data['number'] or '')[:20],  # –ù–æ–º–µ—Ä: –º–∞–∫—Å–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤
            (record_data['last_name'] or '')[:100],  # –§–∞–º–∏–ª–∏—è: –º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤
            (record_data['first_name'] or '')[:100],  # –ò–º—è: –º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤
            (record_data['middle_name'] or '')[:100] if record_data['middle_name'] else None,  # –û—Ç—á–µ—Å—Ç–≤–æ: –º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤
            record_data['address'],  # TEXT –ø–æ–ª–µ - –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
            (record_data['memo1'] or '')[:255] if record_data['memo1'] else None,  # Memo1: –º–∞–∫—Å–∏–º—É–º 255 —Å–∏–º–≤–æ–ª–æ–≤
            (record_data['memo2'] or '')[:255] if record_data['memo2'] else None,  # Memo2: –º–∞–∫—Å–∏–º—É–º 255 —Å–∏–º–≤–æ–ª–æ–≤
            (record_data['birth_place'] or '')[:255] if record_data['birth_place'] else None,  # –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: –º–∞–∫—Å–∏–º—É–º 255 —Å–∏–º–≤–æ–ª–æ–≤
            record_data['birth_date'],
            (record_data['imsi'] or '')[:50] if record_data['imsi'] else None,  # IMSI: –º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤
            None,  # gender
            None,  # email
            True,  # is_active
            timezone.now(),  # created_at
            timezone.now(),  # updated_at
            record_data['import_history_id']
        ]
        
        cursor.execute(f"""
            INSERT INTO {temp_table_name} (
                original_id, number, last_name, first_name, middle_name, 
                address, memo1, memo2, birth_place, birth_date, imsi, 
                gender, email, is_active, created_at, updated_at, import_history_id
            ) VALUES (
                %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s
            )
        """, safe_data)
    logger.debug(f"‚úÖ –ó–∞–ø–∏—Å—å ID={record_data['original_id']} –≤—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ {temp_table_name}")

def _finalize_import(import_history):
    """–§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç: –∞—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –∏ –∑–∞–º–µ–Ω—è–µ—Ç –µ–µ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π"""
    temp_table_name = import_history.temp_table_name
    archive_table_name = f"subscribers_subscriber_archive_{int(timezone.now().timestamp())}"
    
    logger.info(f"üèÅ –ù–∞—á–∏–Ω–∞–µ–º —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—é –∏–º–ø–æ—Ä—Ç–∞...")
    logger.info(f"üìÅ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞: {temp_table_name}")
    logger.info(f"üì¶ –ê—Ä—Ö–∏–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞: {archive_table_name}")
    
    with connection.cursor() as cursor:
        try:
            # 1. –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤–Ω—É—é –∫–æ–ø–∏—é –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
            logger.info("üìã –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–Ω–æ–π –∫–æ–ø–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã...")
            cursor.execute(f"""
                CREATE TABLE {archive_table_name} AS 
                SELECT * FROM subscribers_subscriber
            """)
            logger.info("‚úÖ –ê—Ä—Ö–∏–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞")
            
            # 2. –û—á–∏—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
            logger.info("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã...")
            cursor.execute("DELETE FROM subscribers_subscriber")
            logger.info("‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –æ—á–∏—â–µ–Ω–∞")
            
            # 3. –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤ –æ—Å–Ω–æ–≤–Ω—É—é (–±–µ–∑ –ø–æ–ª—è id - –æ–Ω–æ –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
            logger.info("üì§ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤ –æ—Å–Ω–æ–≤–Ω—É—é...")
            cursor.execute(f"""
                INSERT INTO subscribers_subscriber (
                    original_id, number, last_name, first_name, middle_name,
                    address, memo1, memo2, birth_place, birth_date, imsi,
                    gender, email, is_active, created_at, updated_at, import_history_id
                )
                SELECT 
                    original_id, number, last_name, first_name, middle_name,
                    address, memo1, memo2, birth_place, birth_date, imsi,
                    gender, email, is_active, created_at, updated_at, import_history_id
                FROM {temp_table_name}
            """)
            logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É")
            
            # 4. –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
            logger.info("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã...")
            cursor.execute(f"DROP TABLE IF EXISTS {temp_table_name}")
            logger.info("‚úÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —É–¥–∞–ª–µ–Ω–∞")
            
            # 5. –û–±–Ω–æ–≤–ª—è–µ–º ImportHistory
            import_history.archive_table_name = archive_table_name
            import_history.temp_table_name = None
            import_history.save()
            
            logger.info("üéâ –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            return True
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–µ –∫–∞–∫ –µ—Å—Ç—å
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–∞: {str(e)}")
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–∞: {str(e)}")

def _cleanup_temp_table(temp_table_name):
    """–£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∏ –æ—à–∏–±–∫–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–µ –∏–º–ø–æ—Ä—Ç–∞"""
    if temp_table_name:
        try:
            with connection.cursor() as cursor:
                cursor.execute(f"DROP TABLE IF EXISTS {temp_table_name}")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É {temp_table_name}: {str(e)}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –†–µ–≥–∏—Å—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤, —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ
_RUNNING_IMPORTS = {}

# –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–∞—á–∏ Celery —Å –ø–æ–º–æ—â—å—é –æ–±—ã—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
def process_csv_import_task(csv_data, import_history_id, delimiter, encoding, has_header, update_existing):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–º–ø–æ—Ä—Ç–∞ CSV –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        csv_data: –ó–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤ base64 –¥–∞–Ω–Ω—ã–µ CSV-—Ñ–∞–π–ª–∞
        import_history_id: ID –∑–∞–ø–∏—Å–∏ ImportHistory
        delimiter: –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å CSV
        encoding: –ö–æ–¥–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞
        has_header: –°–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ CSV –∑–∞–≥–æ–ª–æ–≤–æ–∫
        update_existing: –û–±–Ω–æ–≤–ª—è—Ç—å –ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
    """
    # –ò–º–∏—Ç–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
    def delay(*args, **kwargs):
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥ —Å—Ä–∞–∑—É –∂–µ, –±–µ–∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏
        return process_csv_import_task_impl(*args, **kwargs)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ delay –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    process_csv_import_task.delay = delay
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É
    return process_csv_import_task_impl(csv_data, import_history_id, delimiter, encoding, has_header, update_existing)

def process_csv_import_task_impl(csv_data, import_history_id, delimiter, encoding, has_header, update_existing):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV.
    –ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤ –∞—Ä—Ö–∏–≤–Ω—É—é –∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –Ω–æ–≤—É—é.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏ –∏–º–ø–æ—Ä—Ç–∞
        import_history = ImportHistory.objects.get(id=import_history_id)
        import_history.status = 'processing'
        import_history.save()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º
        archive_table_name = f"subscribers_subscriber_archive_{int(timezone.now().timestamp())}"
        import_history.archive_table_name = archive_table_name
        import_history.save()
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ CSV –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
        raw_lines = csv_data.splitlines()
        processed_lines = []
        current_line = None
        line_number = 0
        id_pattern = re.compile(r'^\s*\d+')  # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å —á–∏—Å–ª–∞ (ID)
        
        # –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤—ã—Ö —Å—Ç—Ä–æ–∫ CSV –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
        sample_rows = []
        for i, line in enumerate(raw_lines[:10]):  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫
            if i == 0 and has_header:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                continue
            if not line.strip():  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                continue
            if id_pattern.match(line.split(delimiter)[0]):  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ - —ç—Ç–æ –∑–∞–ø–∏—Å—å (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å ID)
                parts = line.split(delimiter)
                sample_rows.append(parts)
                if len(parts) > 9:  # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–ª–æ–Ω–∫–∞ –¥–∞—Ç—ã
                    print(f"–ü—Ä–∏–º–µ—Ä –¥–∞—Ç—ã –≤ —Å—Ç—Ä–æ–∫–µ {i+1}: '{parts[9]}'")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º
        if sample_rows:
            print("\n–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã CSV:")
            max_cols = max(len(row) for row in sample_rows)
            for col_idx in range(max_cols):
                non_empty_count = sum(1 for row in sample_rows if col_idx < len(row) and row[col_idx].strip())
                if col_idx == 9:  # –ö–æ–ª–æ–Ω–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
                    print(f"–ö–æ–ª–æ–Ω–∫–∞ {col_idx+1} (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è): {non_empty_count}/{len(sample_rows)} –Ω–µ–ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
                    # –ü—Ä–∏–º–µ—Ä—ã –∑–Ω–∞—á–µ–Ω–∏–π
                    examples = [row[col_idx] for row in sample_rows if col_idx < len(row) and row[col_idx].strip()]
                    if examples:
                        print(f"–ü—Ä–∏–º–µ—Ä—ã –∑–Ω–∞—á–µ–Ω–∏–π: {examples[:5]}")
        
        for line in raw_lines:
            line_number += 1
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            if not line.strip():
                continue
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if line_number == 1 and has_header:
                processed_lines.append(line)
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å ID (—á–∏—Å–ª–∞)
            is_new_record = bool(id_pattern.match(line.split(delimiter)[0]))
            
            if is_new_record:
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
                if current_line is not None:
                    processed_lines.append(current_line)
                # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
                current_line = line
            else:
                # –≠—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–æ–∫–∏
                if current_line is not None:
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–æ–π
                    current_line = current_line + " " + line.strip()
                else:
                    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∏ –æ–Ω–∞ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å ID - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
                    if not has_header or line_number > 1:
                        import_history.error_message = f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Å—Ç—Ä–æ–∫–∞ {line_number} –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å ID –∏ –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏. –°—Ç—Ä–æ–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞."
                        import_history.save()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
        if current_line is not None:
            processed_lines.append(current_line)
        
        # –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        processed_csv_data = "\n".join(processed_lines)
        
        # –ß—Ç–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ CSV-—Ñ–∞–π–ª–∞
        csv_file = io.StringIO(processed_csv_data)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CSV-reader –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–≤—ã—á–µ–∫
        csv_reader = csv.reader(
            csv_file, 
            delimiter=delimiter, 
            quotechar='"', 
            quoting=csv.QUOTE_MINIMAL
        )
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if has_header:
            next(csv_reader, None)
        
        # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        parsed_rows = []
        errors = []
        row_count = 0
        
        for row in csv_reader:
            row_count += 1
            
            if len(row) < 8:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π
                errors.append(f"–°—Ç—Ä–æ–∫–∞ {row_count}: –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π ({len(row)})")
                continue
                
            try:
                # –†–∞–∑–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É CSV
                original_id_str = row[0].strip() if row[0] else None
                original_id = None
                
                if original_id_str:
                    try:
                        original_id = int(original_id_str)
                    except ValueError:
                        errors.append(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≤ —Å—Ç—Ä–æ–∫–µ {row_count}: {original_id_str}")
                
                number = row[1].strip() if len(row) > 1 else ""
                last_name = row[2].strip() if len(row) > 2 else ""
                first_name = row[3].strip() if len(row) > 3 else ""
                middle_name = row[4].strip() if len(row) > 4 else None
                address = row[5].strip() if len(row) > 5 else None
                memo1 = row[6].strip() if len(row) > 6 else None
                memo2 = row[7].strip() if len(row) > 7 else None
                birth_place = row[8].strip() if len(row) > 8 else None
                
                birth_date = None
                if len(row) > 9 and row[9] and row[9].strip():
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–∞—Ç–æ–π
                        from datetime import datetime, date
                        birth_date_str = row[9].strip()
                        
                        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã: '{birth_date_str}' –≤ —Å—Ç—Ä–æ–∫–µ {row_count}")
                        
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º NULL –∑–Ω–∞—á–µ–Ω–∏–µ (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ None)
                        if birth_date_str.upper() == 'NULL':
                            print(f"–ù–∞–π–¥–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ NULL, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º date –∫–∞–∫ None")
                            birth_date = None
                        else:
                            # –î–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º (YYYY-MM-DD 00:00:00.000)
                            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç—Ä–µ–∑–∞–µ–º –≤—Ä–µ–º—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                            if ' ' in birth_date_str:
                                date_part = birth_date_str.split(' ')[0]
                                print(f"–û—Ç–¥–µ–ª–µ–Ω–∞ —á–∞—Å—Ç—å —Å –¥–∞—Ç–æ–π: {date_part}")
                            else:
                                date_part = birth_date_str
                                
                            # –¢–µ–ø–µ—Ä—å —Ä–∞–∑–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å —Å –¥–∞—Ç–æ–π
                            if '-' in date_part:
                                parts = date_part.split('-')
                                if len(parts) == 3:
                                    year = int(parts[0])
                                    month = int(parts[1])
                                    day = int(parts[2])
                                    
                                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞—Ç—ã
                                    if 1 <= day <= 31 and 1 <= month <= 12 and 1900 <= year <= 2100:
                                        try:
                                            birth_date = date(year, month, day)
                                            print(f"–î–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∞: {birth_date}")
                                        except ValueError as ve:
                                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∞—Ç—ã: {ve}")
                                            errors.append(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ '{birth_date_str}' –≤ —Å—Ç—Ä–æ–∫–µ {row_count}: {ve}")
                                    else:
                                        print(f"–ù–µ–≤–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–Ω—è ({day}), –º–µ—Å—è—Ü–∞ ({month}) –∏–ª–∏ –≥–æ–¥–∞ ({year})")
                                        errors.append(f"–ù–µ–≤–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–Ω—è, –º–µ—Å—è—Ü–∞ –∏–ª–∏ –≥–æ–¥–∞ –≤ –¥–∞—Ç–µ '{birth_date_str}' (—Å—Ç—Ä–æ–∫–∞ {row_count})")
                                else:
                                    print(f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π –≤ –¥–∞—Ç–µ: {parts}")
                                    errors.append(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã '{birth_date_str}' –≤ —Å—Ç—Ä–æ–∫–µ {row_count}")
                            else:
                                # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã
                                try:
                                    parsed_date = datetime.strptime(birth_date_str, '%Y-%m-%d %H:%M:%S.%f')
                                    birth_date = parsed_date.date()
                                    print(f"–î–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ strptime: {birth_date}")
                                except ValueError:
                                    try:
                                        # –ü—Ä–æ–±—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç
                                        parsed_date = datetime.strptime(birth_date_str, '%Y-%m-%d')
                                        birth_date = parsed_date.date()
                                        print(f"–î–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ strptime (–ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç): {birth_date}")
                                    except ValueError as ve:
                                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞—Ç—É '{birth_date_str}': {ve}")
                                        errors.append(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞—Ç—É '{birth_date_str}' –≤ —Å—Ç—Ä–æ–∫–µ {row_count}")
                    except Exception as e:
                        errors.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–µ {row_count}: {str(e)}")
                        print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã: {str(e)}")
                
                imsi = row[10].strip() if len(row) > 10 else None
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
                if not last_name or not first_name:
                    errors.append(f"–°—Ç—Ä–æ–∫–∞ {row_count}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (—Ñ–∞–º–∏–ª–∏—è –∏–ª–∏ –∏–º—è)")
                    continue
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
                parsed_rows.append({
                    'original_id': original_id,
                    'number': number,
                    'last_name': last_name,
                    'first_name': first_name,
                    'middle_name': middle_name,
                    'address': address,
                    'memo1': memo1,
                    'memo2': memo2,
                    'birth_place': birth_place,
                    'birth_date': birth_date,
                    'imsi': imsi
                })
                
            except Exception as e:
                errors.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ {row_count}: {str(e)}")
        
        # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É –∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å —á–∏—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        with connection.cursor() as cursor:
            try:
                # 1. –°–æ–∑–¥–∞—ë–º –∞—Ä—Ö–∏–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                cursor.execute(f"""
                    CREATE TABLE {archive_table_name} AS 
                    SELECT * FROM subscribers_subscriber
                """)
                
                # 2. –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É
                cursor.execute("DELETE FROM subscribers_subscriber")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏—Å—Ç–æ—Ä–∏—é –∏–º–ø–æ—Ä—Ç–∞
                import_history.archive_table_name = archive_table_name
                import_history.records_count = len(parsed_rows)
                
                if errors:
                    error_message = "\n".join(errors[:20])
                    if len(errors) > 20:
                        error_message += f"\n... –µ—â—ë {len(errors) - 20} –æ—à–∏–±–æ–∫"
                    import_history.error_message = error_message
                    
                import_history.save()
                
            except Exception as e:
                import_history.status = 'failed'
                import_history.error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
                import_history.save()
                return {"success": False, "error": str(e)}
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        created_count = 0
        failed_count = 0
        
        for record in parsed_rows:
            try:
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                if record['birth_date'] is not None:
                    from datetime import date
                    print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å –¥–∞—Ç–æ–π —Ä–æ–∂–¥–µ–Ω–∏—è: {record['birth_date']} (—Ç–∏–ø: {type(record['birth_date']).__name__})")
                    
                    # –ï—Å–ª–∏ birth_date –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º —Ç–∏–ø–∞ date, —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –µ–≥–æ
                    if not isinstance(record['birth_date'], date):
                        if hasattr(record['birth_date'], 'date'):  # –ï—Å–ª–∏ —ç—Ç–æ datetime
                            record['birth_date'] = record['birth_date'].date()
                            print(f"–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ date: {record['birth_date']}")
                
                # –ö–∞–∂–¥–∞—è –∑–∞–ø–∏—Å—å –≤ —Å–≤–æ–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                with transaction.atomic():
                    new_subscriber = Subscriber(
                        original_id=record['original_id'],
                        number=record['number'],
                        last_name=record['last_name'],
                        first_name=record['first_name'],
                        middle_name=record['middle_name'],
                        address=record['address'],
                        memo1=record['memo1'],
                        memo2=record['memo2'],
                        birth_place=record['birth_place'],
                        birth_date=record['birth_date'],
                        imsi=record['imsi'],
                        import_history=import_history
                    )
                    new_subscriber.save()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å –ª–∏ –¥–∞—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                    if record['birth_date'] is not None:
                        saved_sub = Subscriber.objects.get(pk=new_subscriber.pk)
                        if saved_sub.birth_date is None:
                            print(f"–í–ù–ò–ú–ê–ù–ò–ï: –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å –¥–ª—è –∞–±–æ–Ω–µ–Ω—Ç–∞ {new_subscriber.pk}")
                        else:
                            print(f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ: {saved_sub.birth_date}")
                    
                    created_count += 1
            except Exception as e:
                failed_count += 1
                errors.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {str(e)}")
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–±–æ–Ω–µ–Ω—Ç–∞: {str(e)}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–º–ø–æ—Ä—Ç–∞
        import_history.records_created = created_count
        import_history.records_failed = failed_count
        import_history.status = 'completed'
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–∞—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if errors:
            error_message = "\n".join(errors[:20])
            if len(errors) > 20:
                error_message += f"\n... –µ—â—ë {len(errors) - 20} –æ—à–∏–±–æ–∫"
            import_history.error_message = error_message
            
        import_history.save()
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∞—Ä—Ö–∏–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3
        try:
            print("–ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...")
            with connection.cursor() as cursor:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                cursor.execute("""
                    SELECT table_name 
                    FROM information_schema.tables 
                    WHERE table_name LIKE 'subscribers_subscriber_archive_%'
                    ORDER BY table_name DESC
                """)
                archive_tables = [row[0] for row in cursor.fetchall()]
                print(f"–ù–∞–π–¥–µ–Ω–æ –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü: {len(archive_tables)}")
                
                # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 3 –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã (–≤–∫–ª—é—á–∞—è —Ç–µ–∫—É—â—É—é)
                tables_to_keep = 3
                tables_to_delete = archive_tables[tables_to_keep:]
                
                # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ç–∞–±–ª–∏—Ü—ã
                for table in tables_to_delete:
                    print(f"–£–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–µ–π –∞—Ä—Ö–∏–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã: {table}")
                    cursor.execute(f"DROP TABLE IF EXISTS {table}")
                
                print(f"–£–¥–∞–ª–µ–Ω–æ –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü: {len(tables_to_delete)}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                saved_tables = ", ".join(archive_tables[:tables_to_keep])
                cleanup_info = f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü: {min(tables_to_keep, len(archive_tables))}. –£–¥–∞–ª–µ–Ω–æ: {len(tables_to_delete)}."
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—á–∏—Å—Ç–∫–µ –≤ info_message
                import_history.info_message = cleanup_info
                import_history.save()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—á–∏—Å—Ç–∫–µ –∫ –æ—à–∏–±–∫–∞–º, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                if import_history.error_message:
                    import_history.error_message += f"\n\n{cleanup_info}"
                else:
                    import_history.error_message = cleanup_info
                
                import_history.save()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü: {str(e)}")
            import_history.error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü: {str(e)}"
            import_history.save()
        
        return {
            "success": True,
            "created": created_count,
            "failed": failed_count,
            "total": row_count,
            "archive_table": archive_table_name
        }
        
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–º–ø–æ—Ä—Ç–∞
        try:
            import_history = ImportHistory.objects.get(id=import_history_id)
            import_history.status = 'failed'
            import_history.error_message = f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            import_history.save()
        except:
            pass
        
        return {"success": False, "error": str(e)}

# === –†–ï–ñ–ò–ú –ü–û–¢–û–ö–û–í–û–ì–û (–†–ï–ó–Æ–ú–ò–†–£–ï–ú–û–ì–û) –ò–ú–ü–û–†–¢–ê ===

def _count_total_records(file_path: Path, delimiter: str, has_header: bool) -> int:
    """
    –ü–æ–¥—Å—á—ë—Ç —á–∏—Å–ª–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤ CSV —Å —É—á–µ—Ç–æ–º —É–º–Ω–æ–≥–æ —Å–∫–ª–µ–∏–≤–∞–Ω–∏—è.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ _process_csv_lines_with_smart_joining.
    """
    logger.info(f"üìä –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π —Å —É–º–Ω—ã–º —Å–∫–ª–µ–∏–≤–∞–Ω–∏–µ–º...")
    
    total = 0
    
    with file_path.open('r', encoding='utf-8', errors='ignore') as fh:
        # –ß–∏—Ç–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å—Ä–∞–∑—É –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        all_lines = [line.rstrip('\n\r') for line in fh.readlines()]
        
        logger.info(f"üìÅ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞: {len(all_lines)} —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö —Å—Ç—Ä–æ–∫")
        
        i = 0
        while i < len(all_lines):
            current_line = _clean_line_for_combining(all_lines[i])
            physical_line_idx = i + 1  # –ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–∞–π–ª–µ (1-based)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if physical_line_idx == 1 and has_header:
                i += 1
                continue
                
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            if not current_line:
                i += 1
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω–æ–π (ID + —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä)
            is_current_valid = _is_valid_line(current_line, delimiter)
            
            if is_current_valid:
                # –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω–∞—è - —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –æ–¥–Ω—É –ª–æ–≥–∏—á–µ—Å–∫—É—é –∑–∞–ø–∏—Å—å
                total += 1
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –≤–∞–ª–∏–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
                j = i + 1
                while j < len(all_lines):
                    next_line = _clean_line_for_combining(all_lines[j])
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                    if not next_line:
                        j += 1
                        continue
                    
                    is_next_valid = _is_valid_line(next_line, delimiter)
                    
                    if is_next_valid:
                        # –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω–∞—è - –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫
                        break
                    else:
                        # –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –≤–∞–ª–∏–¥–Ω–∞—è - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–µ (—ç—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∑–∞–ø–∏—Å–∏)
                        j += 1
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –∏–ª–∏ –∫ –∫–æ–Ω—Ü—É —Ñ–∞–π–ª–∞
                i = j
            else:
                # –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –≤–∞–ª–∏–¥–Ω–∞—è - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–µ)
                i += 1
    
    logger.info(f"üìä –ü–æ–¥—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {total} –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ {len(all_lines)} —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö —Å—Ç—Ä–æ–∫")
    return total

def _process_record_row(parsed, import_history: ImportHistory, created_failed_acc):
    created_count, failed_count, errors = created_failed_acc
    try:
        # –ü–†–û–í–ï–†–ö–ê –§–õ–ê–ì–û–í –ü–†–Ø–ú–û –ü–ï–†–ï–î –°–û–•–†–ê–ù–ï–ù–ò–ï–ú –ó–ê–ü–ò–°–ò
        import_history.refresh_from_db(fields=['pause_requested', 'cancel_requested'])
        if import_history.cancel_requested or import_history.pause_requested:
            # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–∞ –ø–∞—É–∑–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∞, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å—á–µ—Ç—á–∏–∫–∏
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ç–∏ —Ñ–ª–∞–≥–∏
            return created_count, failed_count, errors
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—Ç—ã
        if parsed['birth_date'] is not None:
            from datetime import date
            if not isinstance(parsed['birth_date'], date) and hasattr(parsed['birth_date'], 'date'):
                parsed['birth_date'] = parsed['birth_date'].date()

        logger.info(f"üíæ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏: ID={parsed.get('original_id')}, –Ω–æ–º–µ—Ä={parsed.get('number')}")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã –ø–æ–ª–µ–π –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π
        validation_errors = []
        
        if parsed.get('number') and len(parsed['number']) > 20:
            validation_errors.append(f"–ù–æ–º–µ—Ä —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π: {len(parsed['number'])} —Å–∏–º–≤–æ–ª–æ–≤ (–º–∞–∫—Å–∏–º—É–º 20)")
            parsed['number'] = parsed['number'][:20]  # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
            
        if parsed.get('last_name') and len(parsed['last_name']) > 100:
            validation_errors.append(f"–§–∞–º–∏–ª–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è: {len(parsed['last_name'])} —Å–∏–º–≤–æ–ª–æ–≤ (–º–∞–∫—Å–∏–º—É–º 100)")
            parsed['last_name'] = parsed['last_name'][:100]
            
        if parsed.get('first_name') and len(parsed['first_name']) > 100:
            validation_errors.append(f"–ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ: {len(parsed['first_name'])} —Å–∏–º–≤–æ–ª–æ–≤ (–º–∞–∫—Å–∏–º—É–º 100)")
            parsed['first_name'] = parsed['first_name'][:100]
            
        if parsed.get('middle_name') and len(parsed['middle_name']) > 100:
            validation_errors.append(f"–û—Ç—á–µ—Å—Ç–≤–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ: {len(parsed['middle_name'])} —Å–∏–º–≤–æ–ª–æ–≤ (–º–∞–∫—Å–∏–º—É–º 100)")
            parsed['middle_name'] = parsed['middle_name'][:100]
            
        if parsed.get('imsi') and len(parsed['imsi']) > 50:
            validation_errors.append(f"IMSI —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π: {len(parsed['imsi'])} —Å–∏–º–≤–æ–ª–æ–≤ (–º–∞–∫—Å–∏–º—É–º 50)")
            parsed['imsi'] = parsed['imsi'][:50]

        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        if validation_errors:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ ID={parsed.get('original_id')}: {validation_errors}")

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        record_data = {
            'original_id': parsed['original_id'],
            'number': parsed['number'],
            'last_name': parsed['last_name'],
            'first_name': parsed['first_name'],
            'middle_name': parsed['middle_name'],
            'address': parsed['address'],
            'memo1': parsed['memo1'],
            'memo2': parsed['memo2'],
            'birth_place': parsed['birth_place'],
            'birth_date': parsed['birth_date'],
            'imsi': parsed['imsi'],
            'import_history_id': import_history.id,
        }
        
        logger.info(f"üìù –í—Å—Ç–∞–≤–∫–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É {import_history.temp_table_name}...")
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        _insert_into_temp_table(import_history.temp_table_name, record_data)
        created_count += 1
        
        logger.info(f"‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É")
        
    except Exception as e:  # noqa: BLE001 - –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        failed_count += 1
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {str(e)}"
        errors.append(error_msg)
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: {error_msg}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        raw_data = f"ID: {parsed.get('original_id', 'N/A')}, –ù–æ–º–µ—Ä: {parsed.get('number', 'N/A')}, –§–ò–û: {parsed.get('last_name', 'N/A')} {parsed.get('first_name', 'N/A')} {parsed.get('middle_name', 'N/A')}, –ê–¥—Ä–µ—Å: {parsed.get('address', 'N/A')}, –î–∞—Ç–∞: {parsed.get('birth_date', 'N/A')}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä raw_data
        raw_data_size = len(raw_data)
        if raw_data_size > 4000:
            logger.warning(f"‚ö†Ô∏è –ë–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä raw_data –≤ _process_record_row: {raw_data_size} —Å–∏–º–≤–æ–ª–æ–≤")
        
        ImportError.objects.create(
            import_history=import_history,
            import_session_id=import_history.import_session_id,
            row_index=import_history.processed_rows + 1,
            message=error_msg,
            raw_data=raw_data[:5000]  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–æ 5000 —Å–∏–º–≤–æ–ª–æ–≤
        )
    return created_count, failed_count, errors

def _clean_line_for_combining(line):
    """
    –û—á–∏—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –Ω–µ–ø–µ—á–∞—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.
    –£–±–∏—Ä–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã, —Ç–∞–±—É–ª—è—Ü–∏–∏, –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É CSV (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏, –∫–∞–≤—ã—á–∫–∏).
    """
    if not line:
        return ""
    
    # –ó–∞–º–µ–Ω—è–µ–º —Ç–∞–±—É–ª—è—Ü–∏–∏ –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –Ω–∞ –ø—Ä–æ–±–µ–ª—ã (–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏)
    cleaned = re.sub(r'[\t\r\n]+', ' ', line)
    
    # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
    # –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è CSV, –≥–¥–µ –ø—Ä–æ–±–µ–ª—ã –º–æ–≥—É—Ç –±—ã—Ç—å —á–∞—Å—Ç—å—é –¥–∞–Ω–Ω—ã—Ö
    cleaned = re.sub(r' +', ' ', cleaned)
    
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
    cleaned = cleaned.strip()
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π (–Ω–æ –Ω–µ –≤–Ω—É—Ç—Ä–∏ –∫–∞–≤—ã—á–µ–∫)
    # –≠—Ç–æ —Å–ª–æ–∂–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è, –ø–æ—ç—Ç–æ–º—É –¥–µ–ª–∞–µ–º –±–∞–∑–æ–≤—É—é –æ—á–∏—Å—Ç–∫—É
    cleaned = re.sub(r'\s*,\s*', ',', cleaned)  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ –∑–∞–ø—è—Ç—ã—Ö
    
    return cleaned

def _extract_id_from_line(line, delimiter):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—è —Å—Ç—Ä–æ–∫–∏."""
    if not line or not line.strip():
        return None
    
    try:
        first_field = line.split(delimiter)[0].strip()
        if not first_field:
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        id_value = int(first_field)
        if id_value <= 0:
            return None
        
        return id_value
    except (ValueError, IndexError):
        return None

def _is_valid_line(line, delimiter):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω–æ–π (ID + —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä)."""
    if not line or not line.strip():
        return False
    
    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—é
        fields = line.split(delimiter)
        if len(fields) < 2:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ (ID)
        if not _is_valid_id_field(fields[0]):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ç–æ—Ä–æ–µ –ø–æ–ª–µ (—Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä)
        if not _is_valid_phone_field(fields[1]):
            return False
        
        return True
    except Exception:
        return False

def _is_valid_id_field_value(id_value):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ ID –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º."""
    if id_value is None or id_value <= 0:
        return False
    return True

def _is_valid_id_field(field_value):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º ID."""
    if not field_value or not field_value.strip():
        return False
    
    try:
        parsed_id = int(field_value.strip())
        return _is_valid_id_field_value(parsed_id)
    except ValueError:
        return False

def _is_valid_phone_field(field_value):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º."""
    if not field_value or not field_value.strip():
        return False
    
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã, —Å–∫–æ–±–∫–∏ –∏ –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã
    phone = re.sub(r'[\s\-\(\)\+]', '', field_value.strip())
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    if not phone.isdigit():
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É (–æ–±—ã—á–Ω–æ 10-15 —Ü–∏—Ñ—Ä)
    if len(phone) < 10 or len(phone) > 15:
        return False
    
    return True

def _is_valid_csv_line(row_values):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ CSV –≤–∞–ª–∏–¥–Ω–æ–π."""
    if not row_values or len(row_values) < 2:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ (ID)
    if not _is_valid_id_field(row_values[0]):
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ç–æ—Ä–æ–µ –ø–æ–ª–µ (—Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä)
    if not _is_valid_phone_field(row_values[1]):
        return False
    
    return True

def _try_parse_csv_line(line, delimiter):
    """–ü—Ä–æ–±—É–µ—Ç —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ç—Ä–æ–∫—É –∫–∞–∫ CSV –∏ –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª—è."""
    try:
        import csv
        import io
        # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º
        cleaned_line = _clean_line_for_combining(line)
        csv_io = io.StringIO(cleaned_line)
        reader = csv.reader(csv_io, delimiter=delimiter, quotechar='"', quoting=csv.QUOTE_MINIMAL)
        return next(reader, None)
    except Exception:
        return None

# –°—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º

def _try_process_combined_line(combined_line, logical_row_index, delimiter, import_history):
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ CSV –∑–∞–ø–∏—Å—å.
    
    Returns:
        (success, actual_id) - success —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —É—Å–ø–µ—Ö, actual_id - —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π ID –∑–∞–ø–∏—Å–∏
    """
    errors = []
    logger.info(f"üîç –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ {logical_row_index}...")
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
        logger.info(f"üìù –ü–∞—Ä—Å–∏–Ω–≥ CSV: {combined_line[:200]}...")
        row_values = _try_parse_csv_line(combined_line, delimiter)
        if not row_values:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ CSV")
            return False, None
        
        logger.info(f"‚úÖ CSV —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω: {len(row_values)} –ø–æ–ª–µ–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª–µ–π
        if len(row_values) < 8:
            logger.error(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª–µ–π: {len(row_values)} < 8")
            return False, None
        
        logger.info(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π OK: {len(row_values)}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π ID
        actual_id = None
        if row_values[0] and row_values[0].strip():
            try:
                actual_id = int(row_values[0].strip())
                logger.info(f"‚úÖ ID –∏–∑–≤–ª–µ—á–µ–Ω: {actual_id}")
            except ValueError:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å ID –≤ —á–∏—Å–ª–æ: '{row_values[0]}'")
                return False, None
        
        # –ü–∞—Ä—Å–∏–º –∑–∞–ø–∏—Å—å
        logger.info(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª–µ–π –∑–∞–ø–∏—Å–∏...")
        parsed = _parse_line_to_record(row_values, logical_row_index, errors)
        if not parsed:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –ø–æ–ª—è –∑–∞–ø–∏—Å–∏")
            return False, None
        
        logger.info(f"‚úÖ –ü–æ–ª—è –∑–∞–ø–∏—Å–∏ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω—ã: {list(parsed.keys())}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å
        try:
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É...")
            created_count, failed_count, errors = _process_record_row(parsed, import_history, (0, 0, errors))
            if failed_count == 0:
                logger.info(f"‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É")
                return True, actual_id
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {errors}")
                return False, actual_id
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {str(e)}")
            return False, actual_id
            
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ _try_process_combined_line: {str(e)}")
        return False, None

def _parse_line_to_record(row_values, row_count, errors):
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —Å—Ç—Ä–æ–∫ –≤ —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª–µ–π."""
    try:
        if len(row_values) < 8:
            errors.append(f"–°—Ç—Ä–æ–∫–∞ {row_count}: –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π ({len(row_values)})")
            return None
        original_id = None
        original_id_str = _clean_line_for_combining(row_values[0]) if row_values[0] else None
        if original_id_str:
            try:
                original_id = int(original_id_str)
            except ValueError:
                errors.append(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≤ —Å—Ç—Ä–æ–∫–µ {row_count}: {original_id_str}")
        number = _clean_line_for_combining(row_values[1]) if len(row_values) > 1 else ""
        last_name = _clean_line_for_combining(row_values[2]) if len(row_values) > 2 else ""
        first_name = _clean_line_for_combining(row_values[3]) if len(row_values) > 3 else ""
        middle_name = _clean_line_for_combining(row_values[4]) if len(row_values) > 4 else None
        address = _clean_line_for_combining(row_values[5]) if len(row_values) > 5 else None
        memo1 = _clean_line_for_combining(row_values[6]) if len(row_values) > 6 else None
        memo2 = _clean_line_for_combining(row_values[7]) if len(row_values) > 7 else None
        birth_place = _clean_line_for_combining(row_values[8]) if len(row_values) > 8 else None
        imsi = _clean_line_for_combining(row_values[10]) if len(row_values) > 10 else None

        # –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
        birth_date = None
        if len(row_values) > 9 and row_values[9] and _clean_line_for_combining(row_values[9]):
            from datetime import datetime, date
            birth_date_str = _clean_line_for_combining(row_values[9])
            if birth_date_str.upper() == 'NULL':
                birth_date = None
            else:
                if ' ' in birth_date_str:
                    date_part = birth_date_str.split(' ')[0]
                else:
                    date_part = birth_date_str
                if '-' in date_part:
                    parts = date_part.split('-')
                    if len(parts) == 3:
                        year, month, day = int(parts[0]), int(parts[1]), int(parts[2])
                        if 1 <= day <= 31 and 1 <= month <= 12 and 1900 <= year <= 2100:
                            try:
                                birth_date = date(year, month, day)
                            except ValueError as ve:
                                errors.append(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ '{birth_date_str}' –≤ —Å—Ç—Ä–æ–∫–µ {row_count}: {ve}")
                        else:
                            errors.append(f"–ù–µ–≤–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–Ω—è/–º–µ—Å—è—Ü–∞/–≥–æ–¥–∞ –≤ –¥–∞—Ç–µ '{birth_date_str}' (—Å—Ç—Ä–æ–∫–∞ {row_count})")
                    else:
                        errors.append(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã '{birth_date_str}' –≤ —Å—Ç—Ä–æ–∫–µ {row_count}")
                else:
                    try:
                        parsed_date = datetime.strptime(birth_date_str, '%Y-%m-%d %H:%M:%S.%f')
                        birth_date = parsed_date.date()
                    except ValueError:
                        try:
                            parsed_date = datetime.strptime(birth_date_str, '%Y-%m-%d')
                            birth_date = parsed_date.date()
                        except ValueError:
                            errors.append(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞—Ç—É '{birth_date_str}' –≤ —Å—Ç—Ä–æ–∫–µ {row_count}")

        if not last_name or not first_name:
            errors.append(f"–°—Ç—Ä–æ–∫–∞ {row_count}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (—Ñ–∞–º–∏–ª–∏—è –∏–ª–∏ –∏–º—è)")
            return None

        return {
            'original_id': original_id,
            'number': number,
            'last_name': last_name,
            'first_name': first_name,
            'middle_name': middle_name,
            'address': address,
            'memo1': memo1,
            'memo2': memo2,
            'birth_place': birth_place,
            'birth_date': birth_date,
            'imsi': imsi,
        }
    except Exception as e:  # noqa: BLE001
        errors.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ {row_count}: {str(e)}")
        return None

def _process_csv_lines_with_smart_joining(file_path, delimiter, encoding, has_header, import_history, processed_rows_start):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç CSV —Ñ–∞–π–ª —Å —É–º–Ω—ã–º —Å–∫–ª–µ–∏–≤–∞–Ω–∏–µ–º —Ä–∞–∑–±–∏—Ç—ã—Ö —Å—Ç—Ä–æ–∫.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è –æ —Å–∫–ª–µ–∏–≤–∞–Ω–∏–∏.
    
    Returns:
        (created_count, failed_count, last_processed_row)
    """
    created_count = 0
    failed_count = 0
    logical_row_index = processed_rows_start
    
    last_valid_line = None  # –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ–ª–µ–º
    
    with file_path.open('r', encoding=encoding, errors='ignore') as fh:
        import_history.phase = 'processing'
        import_history.save()
        
        # –ß–∏—Ç–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å—Ä–∞–∑—É –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        all_lines = [line.rstrip('\n\r') for line in fh.readlines()]
        
        logger.info(f"üìÅ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω: {len(all_lines)} —Å—Ç—Ä–æ–∫")
        logger.info(f"üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏: delimiter='{delimiter}', encoding='{encoding}', has_header={has_header}")
        logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å –ø–æ–∑–∏—Ü–∏–∏ {processed_rows_start}")
        
        physical_line_idx = 0
        i = 0
        
        while i < len(all_lines):
            # Heartbeat
            import_history.last_heartbeat_at = timezone.now()
            if logical_row_index % 50 == 0:
                import_history.save(update_fields=['last_heartbeat_at'])

            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ø–∞—É–∑–∞ / –æ—Ç–º–µ–Ω–∞
            import_history.refresh_from_db(fields=['pause_requested', 'cancel_requested'])
            
            if import_history.cancel_requested:
                logger.info(f"–ò–º–ø–æ—Ä—Ç {import_history.id} –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                import_history.status = 'cancelled'
                import_history.stop_reason = '–û—Ç–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'
                import_history.phase = 'completed'
                import_history.save()
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                _cleanup_temp_table(import_history.temp_table_name)
                return created_count, failed_count, logical_row_index
                
            if import_history.pause_requested:
                logger.info(f"–ò–º–ø–æ—Ä—Ç {import_history.id} –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–∞—É–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                import_history.status = 'paused'
                import_history.stop_reason = '–ü–∞—É–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'
                import_history.save()
                # –û–∂–∏–¥–∞–µ–º —Å–Ω—è—Ç–∏—è –ø–∞—É–∑—ã
                while True:
                    import_history.refresh_from_db(fields=['pause_requested', 'cancel_requested'])
                    if import_history.cancel_requested:
                        logger.info(f"–ò–º–ø–æ—Ä—Ç {import_history.id} –æ—Ç–º–µ–Ω–µ–Ω –≤–æ –≤—Ä–µ–º—è –ø–∞—É–∑—ã")
                        import_history.status = 'cancelled'
                        import_history.stop_reason = '–û—Ç–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'
                        import_history.phase = 'completed'
                        import_history.save()
                        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                        _cleanup_temp_table(import_history.temp_table_name)
                        return created_count, failed_count, logical_row_index
                    if not import_history.pause_requested:
                        logger.info(f"–ò–º–ø–æ—Ä—Ç {import_history.id} –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –ø–∞—É–∑—ã")
                        import_history.status = 'processing'
                        import_history.stop_reason = None
                        import_history.save()
                        break
                    import time
                    time.sleep(0.5)
            
            current_line = _clean_line_for_combining(all_lines[i])
            physical_line_idx = i + 1  # –ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–∞–π–ª–µ (1-based)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if physical_line_idx == 1 and has_header:
                i += 1
                continue
                
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            if not current_line:
                i += 1
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω–æ–π (ID + —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä)
            is_current_valid = _is_valid_line(current_line, delimiter)
            
            # –û–¢–õ–ê–î–ö–ê: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—É—é —Å—Ç—Ä–æ–∫—É
            logger.info(f"=== –û–ë–†–ê–ë–û–¢–ö–ê –°–¢–†–û–ö–ò {physical_line_idx} ===")
            logger.info(f"–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞: {current_line[:200]}...")
            logger.info(f"–í–∞–ª–∏–¥–Ω–∞: {is_current_valid}")
            
            if is_current_valid:
                # –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω–∞—è - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–∞–ª–∏–¥–Ω—É—é
                last_valid_line = current_line
                logger.info(f"‚úÖ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞–ª–∏–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏")
                
                # –°–º–æ—Ç—Ä–∏–º —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Å–∫–ª–µ–∏–≤–∞–Ω–∏—è
                combined_line = current_line
                lines_to_combine = [current_line]
                j = i + 1
                next_valid_line = None
                next_valid_line_index = None
                
                # –ò—â–µ–º —Å–ª–µ–¥—É—é—â—É—é –≤–∞–ª–∏–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–∞–µ–º –∫–æ–Ω—Ü–∞ —Ñ–∞–π–ª–∞
                while j < len(all_lines):
                    next_line = _clean_line_for_combining(all_lines[j])
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                    if not next_line:
                        j += 1
                        continue
                    
                    is_next_valid = _is_valid_line(next_line, delimiter)
                    
                    logger.info(f"  –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ {j}: –í–∞–ª–∏–¥–Ω–∞={is_next_valid}")
                    logger.info(f"  –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {next_line[:150]}...")
                    
                    if is_next_valid:
                        # –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω–∞—è - –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —Å–∫–ª–µ–∏–≤–∞–Ω–∏–µ
                        next_valid_line = next_line
                        next_valid_line_index = j
                        logger.info(f"  üõë –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω–∞ - –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —Å–∫–ª–µ–∏–≤–∞–Ω–∏–µ")
                        break
                    else:
                        # –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –≤–∞–ª–∏–¥–Ω–∞—è - –¥–æ–±–∞–≤–ª—è–µ–º –∫ —Ç–µ–∫—É—â–µ–π
                        # –û—á–∏—â–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
                        combined_line = _clean_line_for_combining(combined_line + " " + next_line)
                        lines_to_combine.append(next_line)
                        logger.info(f"  üîó –°–∫–ª–µ–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É {j}: {next_line[:100]}...")
                        logger.info(f"  üìù –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: {combined_line[:200]}...")
                        j += 1
                
                logger.info(f"üìä –ò—Ç–æ–≥–æ–≤–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ: {len(lines_to_combine)} —Å—Ç—Ä–æ–∫")
                logger.info(f"üìù –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: {combined_line[:300]}...")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
                logical_row_index += 1
                if logical_row_index > processed_rows_start:
                    logger.info(f"üîÑ –ü—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø–∏—Å—å {logical_row_index}...")
                    
                    success, actual_id = _try_process_combined_line(
                        combined_line, logical_row_index, delimiter, import_history
                    )
                    
                    if success:
                        created_count += 1
                        logger.info(f"‚úÖ –ó–∞–ø–∏—Å—å {logical_row_index} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!")
                    else:
                        failed_count += 1
                        logger.error(f"‚ùå –ó–∞–ø–∏—Å—å {logical_row_index} –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å")
                        
                        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                        raw_data_lines = []
                        
                        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–∞–ª–∏–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ (–µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–π)
                        if last_valid_line and last_valid_line != current_line:
                            raw_data_lines.append(f"–ü–æ—Å–ª–µ–¥–Ω—è—è –≤–∞–ª–∏–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: {last_valid_line}")
                        
                        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—ã—Ç–∞–ª–∏—Å—å —Å–∫–ª–µ–∏—Ç—å
                        for idx, line in enumerate(lines_to_combine):
                            if idx == 0:
                                raw_data_lines.append(f"–ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ (—Å –≤–∞–ª–∏–¥–Ω—ã–º ID): {line}")
                            else:
                                raw_data_lines.append(f"–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ {idx}: {line}")
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é –≤–∞–ª–∏–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                        if next_valid_line:
                            raw_data_lines.append(f"–°–ª–µ–¥—É—é—â–∞—è –≤–∞–ª–∏–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: {next_valid_line}")
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–ª–µ–∏–≤–∞–Ω–∏—è
                        raw_data_lines.append(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–ª–µ–∏–≤–∞–Ω–∏—è: {combined_line}")
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                        row_values = _try_parse_csv_line(combined_line, delimiter)
                        if row_values:
                            raw_data_lines.append(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞: {len(row_values)}")
                            if len(row_values) > 0:
                                raw_data_lines.append(f"–ü–µ—Ä–≤–æ–µ –ø–æ–ª–µ: '{row_values[0]}'")
                        else:
                            raw_data_lines.append("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ CSV")
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è raw_data
                        final_raw_data = "\n".join(raw_data_lines)
                        raw_data_size = len(final_raw_data)
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        logger.info(f"üìä –†–∞–∑–º–µ—Ä raw_data –¥–ª—è –æ—à–∏–±–∫–∏: {raw_data_size} —Å–∏–º–≤–æ–ª–æ–≤")
                        if raw_data_size > 4000:
                            logger.warning(f"‚ö†Ô∏è –ë–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä raw_data: {raw_data_size} —Å–∏–º–≤–æ–ª–æ–≤ (–±–ª–∏–∑–∫–æ –∫ –ª–∏–º–∏—Ç—É 5000)")
                        
                        # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –ª–∏–º–∏—Ç–∞, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
                        if raw_data_size > 5000:
                            final_raw_data = final_raw_data[:5000]
                            logger.warning(f"‚ö†Ô∏è raw_data –æ–±—Ä–µ–∑–∞–Ω —Å {raw_data_size} –¥–æ 5000 —Å–∏–º–≤–æ–ª–æ–≤")
                        
                        ImportError.objects.create(
                            import_history=import_history,
                            import_session_id=import_history.import_session_id,
                            row_index=logical_row_index,
                            message="–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–±–∏—Ç—É—é –∑–∞–ø–∏—Å—å",
                            raw_data=final_raw_data
                        )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                    import_history.processed_rows = logical_row_index
                    import_history.records_created = created_count
                    import_history.records_failed = failed_count
                    if import_history.records_count:
                        pct = int((logical_row_index / import_history.records_count) * 100)
                        import_history.progress_percent = min(pct, 100)
                    
                    if logical_row_index % 10 == 0:
                        import_history.save()
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ
                if next_valid_line_index is not None:
                    # –£ –Ω–∞—Å –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∞—è –≤–∞–ª–∏–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–µ–π
                    i = next_valid_line_index
                    logger.info(f"üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–∞–ª–∏–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ {i}: {next_valid_line[:100]}...")
                else:
                    # –î–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ —Ñ–∞–π–ª–∞ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ j (–∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞)
                    i = j
                    logger.info(f"üîÑ –î–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ —Ñ–∞–π–ª–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–∑–∏—Ü–∏–∏ {i}")
                
                logger.info("=" * 80)
            else:
                # –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –≤–∞–ª–∏–¥–Ω–∞—è - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (—Ç–∞–∫–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–µ)
                logger.warning(f"‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ {physical_line_idx} –Ω–µ –≤–∞–ª–∏–¥–Ω–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                i += 1
    
    logger.info(f"üèÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    logger.info(f"üìä –ò—Ç–æ–≥–∏: —Å–æ–∑–¥–∞–Ω–æ={created_count}, –æ—à–∏–±–æ–∫={failed_count}, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫={logical_row_index}")
    logger.info("=" * 80)
    
    return created_count, failed_count, logical_row_index

def _process_single_csv_record(line, logical_row_index, delimiter, import_history, expected_id=None):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É CSV –∑–∞–ø–∏—Å—å.
    
    Returns:
        (created_count, failed_count, actual_id)
    """
    errors = []
    created_count = 0
    failed_count = 0
    actual_id = expected_id
    
    try:
        row_values = _try_parse_csv_line(line, delimiter)
        if row_values:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π ID –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            if row_values[0] and row_values[0].strip():
                try:
                    actual_id = int(row_values[0].strip())
                except ValueError:
                    pass
            
            parsed = _parse_line_to_record(row_values, logical_row_index, errors)
            if parsed:
                try:
                    created_count, failed_count, errors = _process_record_row(parsed, import_history, (created_count, failed_count, errors))
                except Exception as e:
                    failed_count += 1
                    msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å: {str(e)}"
                    errors.append(msg)
                    ImportError.objects.create(
                        import_history=import_history,
                        import_session_id=import_history.import_session_id,
                        row_index=logical_row_index,
                        message=msg,
                        raw_data=line[:5000]  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–æ 5000 —Å–∏–º–≤–æ–ª–æ–≤
                    )
            else:
                # –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
                if errors:
                    failed_count += 1
                    ImportError.objects.create(
                        import_history=import_history,
                        import_session_id=import_history.import_session_id,
                        row_index=logical_row_index,
                        message=errors[-1],
                        raw_data=line[:5000]  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–æ 5000 —Å–∏–º–≤–æ–ª–æ–≤
                    )
    except Exception as e:
        failed_count += 1
        ImportError.objects.create(
            import_history=import_history,
            import_session_id=import_history.import_session_id,
            row_index=logical_row_index,
            message=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏: {str(e)}",
            raw_data=line[:5000]  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–æ 5000 —Å–∏–º–≤–æ–ª–æ–≤
        )
    
    return created_count, failed_count, actual_id

def process_csv_import_stream(import_history_id: int) -> None:
    """–ü–æ—Ç–æ–∫–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–∑—é–º–µ –ø–æ ImportHistory.processed_rows."""
    import_history = ImportHistory.objects.get(id=import_history_id)
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ {import_history_id}")
    logger.info(f"üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {import_history.status}")
    logger.info(f"üìÅ –§–∞–π–ª: {import_history.uploaded_file}")
    
    # –ï—Å–ª–∏ –∏–º–ø–æ—Ä—Ç –±—ã–ª –≤ –ø–∞—É–∑–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–æ–≥–æ –º–µ—Å—Ç–∞, –≥–¥–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å
    if import_history.status == 'paused':
        logger.info(f"‚è∏Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç {import_history_id} —Å –ø–æ–∑–∏—Ü–∏–∏ {import_history.processed_rows}")
        import_history.status = 'processing'
        import_history.phase = 'processing'
    else:
        logger.info(f"üÜï –ù–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
        import_history.status = 'processing'
        import_history.phase = 'initializing'
    
    import_history.save()

    # –ü—É—Ç—å –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
    if not import_history.uploaded_file:
        import_history.status = 'failed'
        import_history.error_message = '–ù–µ –Ω–∞–π–¥–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞'
        import_history.save()
        return

    file_path = Path(import_history.uploaded_file.path)
    delimiter = import_history.delimiter
    encoding = import_history.encoding or 'utf-8'
    has_header = import_history.has_header

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –æ–¥–∏–Ω —Ä–∞–∑
    if not import_history.records_count:
        try:
            import_history.phase = 'counting'
            import_history.save()
            total = _count_total_records(file_path, delimiter, has_header)
            import_history.records_count = total
            import_history.progress_percent = 0
            import_history.save()
        except Exception as e:  # noqa: BLE001
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {e}")

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –æ–¥–∏–Ω —Ä–∞–∑
    if not import_history.temp_table_name:
        try:
            logger.info("üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞...")
            import_history.phase = 'creating_temp_table'
            import_history.save()
            temp_table_name = f"subscribers_subscriber_temp_{int(timezone.now().timestamp())}"
            _create_temp_table(temp_table_name)
            import_history.temp_table_name = temp_table_name
            import_history.save()
            logger.info(f"‚úÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ {temp_table_name} –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        except Exception as e:  # noqa: BLE001
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã: {str(e)}")
            import_history.status = 'failed'
            import_history.error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã: {str(e)}"
            import_history.save()
            return

    id_pattern = re.compile(r'^\s*\d+')
    processed_rows_start = import_history.processed_rows or 0

    created_count = import_history.records_created or 0
    failed_count = import_history.records_failed or 0
    errors: list[str] = []

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É —Å —É–º–Ω—ã–º —Å–∫–ª–µ–∏–≤–∞–Ω–∏–µ–º —Å—Ç—Ä–æ–∫
    try:
        created_count, failed_count, logical_row_index = _process_csv_lines_with_smart_joining(
            file_path, delimiter, encoding, has_header, import_history, processed_rows_start
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        import_history.processed_rows = logical_row_index
        import_history.records_created = created_count
        import_history.records_failed = failed_count
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É (–±–µ–∑ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏)
        import_history.status = 'temp_completed'
        import_history.phase = 'waiting_finalization'  # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–æ 18 —Å–∏–º–≤–æ–ª–æ–≤
        import_history.progress_percent = 100
        if errors:
            msg = "\n".join(errors[:20])
            if len(errors) > 20:
                msg += f"\n... –µ—â—ë {len(errors) - 20} –æ—à–∏–±–æ–∫"
            import_history.error_message = msg
        import_history.save()
        logger.info("üéâ –ò–º–ø–æ—Ä—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω! –û–∂–∏–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—é.")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–º–ø–æ—Ä—Ç–∞: {str(e)}")
        import_history.status = 'failed'
        import_history.error_message = f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
        import_history.save()
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
        _cleanup_temp_table(import_history.temp_table_name)
    finally:
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –æ—á–∏—â–µ–Ω–∞ –ø—Ä–∏ –ª—é–±–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        if import_history.temp_table_name and import_history.status in ['failed', 'cancelled']:
            logger.info(f"üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã {import_history.temp_table_name}")
            _cleanup_temp_table(import_history.temp_table_name)
        _RUNNING_IMPORTS.pop(import_history_id, None)
        logger.info(f"üèÅ –ò–º–ø–æ—Ä—Ç {import_history_id} –∑–∞–≤–µ—Ä—à–µ–Ω. –°—Ç–∞—Ç—É—Å: {import_history.status}")

def start_import_async(import_history_id: int) -> bool:
    """–°—Ç–∞—Ä—Ç—É–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ –∏–¥—ë—Ç. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª–∏ —Å–µ–π—á–∞—Å."""
    if _RUNNING_IMPORTS.get(import_history_id):
        logger.info(f"–ò–º–ø–æ—Ä—Ç {import_history_id} —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ")
        return False
    
    logger.info(f"–ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç {import_history_id}")
    t = threading.Thread(target=process_csv_import_stream, args=(import_history_id,), daemon=True)
    _RUNNING_IMPORTS[import_history_id] = t
    t.start()
    return True

def is_import_running(import_history_id: int) -> bool:
    t = _RUNNING_IMPORTS.get(import_history_id)
    is_running = t.is_alive() if t else False
    return is_running

# –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–∞—á–∏ Celery –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
def cleanup_old_import_data(days=30):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–∞
    
    Args:
        days (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        
    Returns:
        str: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    try:
        return cleanup_old_import_data_impl(days)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {str(e)}"

def cleanup_old_import_data_impl(days=30):
    """–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á–∏ –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    from django.utils import timezone
    from datetime import timedelta
    
    cutoff_date = timezone.now() - timedelta(days=days)
    
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–º–ø–æ—Ä—Ç–∞
        old_imports = ImportHistory.objects.filter(created_at__lt=cutoff_date)
        count = old_imports.count()
        old_imports.delete()
            
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞
        old_errors = ImportError.objects.filter(created_at__lt=cutoff_date)
        error_count = old_errors.count()
        old_errors.delete()
        
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ {count} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–º–ø–æ—Ä—Ç–∞ –∏ {error_count} –æ—à–∏–±–æ–∫")
        return f"–£—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ: {count} –∑–∞–ø–∏—Å–µ–π –∏–º–ø–æ—Ä—Ç–∞, {error_count} –æ—à–∏–±–æ–∫"
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {str(e)}"

def cleanup_old_archive_tables(keep_count=3):
    """
    –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ keep_count —Ç–∞–±–ª–∏—Ü.
    
    Args:
        keep_count (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏
    """
    from django.db import connection
    
    try:
        with connection.cursor() as cursor:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
            cursor.execute("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_name LIKE 'subscribers_subscriber_archive_%'
                ORDER BY table_name DESC
            """)
            archive_tables = [row[0] for row in cursor.fetchall()]
            
            if len(archive_tables) <= keep_count:
                return {
                    "success": True,
                    "total_kept": len(archive_tables),
                    "total_deleted": 0,
                    "message": f"–í—Å–µ {len(archive_tables)} –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"
                }
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            tables_to_keep = archive_tables[:keep_count]
            tables_to_delete = archive_tables[keep_count:]
            
            # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            for table in tables_to_delete:
                cursor.execute(f"DROP TABLE IF EXISTS {table}")
            
            return {
                "success": True,
                "total_kept": len(tables_to_keep),
                "total_deleted": len(tables_to_delete),
                "message": f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {len(tables_to_keep)}, —É–¥–∞–ª–µ–Ω–æ: {len(tables_to_delete)}"
            }
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü: {str(e)}")
        return {
            "success": False,
            "error": str(e)
        }

def cleanup_old_archive_tables_task(keep_count=3):
    """
    –ò–º–∏—Ç–∞—Ü–∏—è Celery –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü.
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º delay –∫–∞–∫ –∏–º–∏—Ç–∞—Ü–∏—é Celery
    def delay(keep_count=3):
        return cleanup_old_archive_tables(keep_count)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ delay –∫ —Ñ—É–Ω–∫—Ü–∏–∏
    cleanup_old_archive_tables_task.delay = delay
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É
    return cleanup_old_archive_tables(keep_count) 
