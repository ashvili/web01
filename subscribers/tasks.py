import csv
import io
import datetime
import logging
import re
import threading
import os
from pathlib import Path
from typing import Optional
from django.conf import settings
from django.db import transaction, connection
from django.utils import timezone

from .models import Subscriber, ImportHistory, ImportError

def _create_temp_table(temp_table_name):
    """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å —Ç–æ–π –∂–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π, —á—Ç–æ –∏ –æ—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ subscribers_subscriber"""
    logger.info(f"[BUILD] –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã: {temp_table_name}")
    with connection.cursor() as cursor:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Ç–æ—á–Ω–æ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute(f"""
            CREATE TABLE {temp_table_name} (
                id SERIAL PRIMARY KEY,
                original_id INTEGER,
                number VARCHAR(20),
                last_name VARCHAR(100),
                first_name VARCHAR(100),
                middle_name VARCHAR(100),
                address TEXT,
                memo1 VARCHAR(255),
                memo2 VARCHAR(255),
                birth_place VARCHAR(255),
                birth_date DATE,
                imsi VARCHAR(50),
                gender VARCHAR(1),
                email VARCHAR(254),
                is_active BOOLEAN,
                created_at TIMESTAMP WITH TIME ZONE,
                updated_at TIMESTAMP WITH TIME ZONE,
                import_history_id INTEGER
            )
        """)
    logger.info(f"[OK] –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ {temp_table_name} —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    return temp_table_name

def _insert_into_temp_table(temp_table_name, record_data):
    """–í—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É"""
    # logger.debug(f"[INSERT] –í—Å—Ç–∞–≤–∫–∞ –∑–∞–ø–∏—Å–∏ ID={record_data['original_id']} –≤ {temp_table_name}")
    with connection.cursor() as cursor:
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ - –æ–±—Ä–µ–∑–∞–µ–º –≤—Å–µ –ø–æ–ª—è –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
        safe_data = [
            record_data['original_id'],
            (record_data['number'] or '')[:20],  # –ù–æ–º–µ—Ä: –º–∞–∫—Å–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤
            (record_data['last_name'] or '')[:100],  # –§–∞–º–∏–ª–∏—è: –º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤
            (record_data['first_name'] or '')[:100],  # –ò–º—è: –º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤
            (record_data['middle_name'] or '')[:100] if record_data['middle_name'] else None,  # –û—Ç—á–µ—Å—Ç–≤–æ: –º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤
            record_data['address'],  # TEXT –ø–æ–ª–µ - –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
            (record_data['memo1'] or '')[:255] if record_data['memo1'] else None,  # Memo1: –º–∞–∫—Å–∏–º—É–º 255 —Å–∏–º–≤–æ–ª–æ–≤
            (record_data['memo2'] or '')[:255] if record_data['memo2'] else None,  # Memo2: –º–∞–∫—Å–∏–º—É–º 255 —Å–∏–º–≤–æ–ª–æ–≤
            (record_data['birth_place'] or '')[:255] if record_data['birth_place'] else None,  # –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: –º–∞–∫—Å–∏–º—É–º 255 —Å–∏–º–≤–æ–ª–æ–≤
            record_data['birth_date'],
            (record_data['imsi'] or '')[:50] if record_data['imsi'] else None,  # IMSI: –º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤
            None,  # gender
            None,  # email
            True,  # is_active
            timezone.now(),  # created_at
            timezone.now(),  # updated_at
            record_data['import_history_id']
        ]
        
        cursor.execute(f"""
            INSERT INTO {temp_table_name} (
                original_id, number, last_name, first_name, middle_name, 
                address, memo1, memo2, birth_place, birth_date, imsi, 
                gender, email, is_active, created_at, updated_at, import_history_id
            ) VALUES (
                %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s
            )
        """, safe_data)
    # logger.debug(f"[OK] –ó–∞–ø–∏—Å—å ID={record_data['original_id']} –≤—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ {temp_table_name}")

def _finalize_import(import_history):
    """–§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç: –∞—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –∏ –∑–∞–º–µ–Ω—è–µ—Ç –µ–µ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π"""
    temp_table_name = import_history.temp_table_name
    archive_table_name = f"subscribers_subscriber_archive_{int(timezone.now().timestamp())}"
    
    logger.info(f"[FINISH] –ù–∞—á–∏–Ω–∞–µ–º —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—é –∏–º–ø–æ—Ä—Ç–∞...")
    logger.info(f"[FILE] –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞: {temp_table_name}")
    logger.info(f"üì¶ –ê—Ä—Ö–∏–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞: {archive_table_name}")
    
    with connection.cursor() as cursor:
        try:
            # 1. –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤–Ω—É—é –∫–æ–ø–∏—é –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
            logger.info("[LIST] –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–Ω–æ–π –∫–æ–ø–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã...")
            cursor.execute(f"""
                CREATE TABLE {archive_table_name} AS 
                SELECT * FROM subscribers_subscriber
            """)
            logger.info("[OK] –ê—Ä—Ö–∏–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞")
            
            # 2. –û—á–∏—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
            logger.info("[TRASH] –û—á–∏—Å—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã...")
            cursor.execute("DELETE FROM subscribers_subscriber")
            logger.info("[OK] –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –æ—á–∏—â–µ–Ω–∞")
            
            # 3. –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤ –æ—Å–Ω–æ–≤–Ω—É—é (–±–µ–∑ –ø–æ–ª—è id - –æ–Ω–æ –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
            logger.info("üì§ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤ –æ—Å–Ω–æ–≤–Ω—É—é...")
            cursor.execute(f"""
                INSERT INTO subscribers_subscriber (
                    original_id, number, last_name, first_name, middle_name,
                    address, memo1, memo2, birth_place, birth_date, imsi,
                    gender, email, is_active, created_at, updated_at, import_history_id
                )
                SELECT 
                    original_id, number, last_name, first_name, middle_name,
                    address, memo1, memo2, birth_place, birth_date, imsi,
                    gender, email, is_active, created_at, updated_at, import_history_id
                FROM {temp_table_name}
            """)
            logger.info("[OK] –î–∞–Ω–Ω—ã–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É")
            
            # 4. –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
            logger.info("[TRASH] –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã...")
            cursor.execute(f"DROP TABLE IF EXISTS {temp_table_name}")
            logger.info("[OK] –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —É–¥–∞–ª–µ–Ω–∞")
            
            # 5. –û–±–Ω–æ–≤–ª—è–µ–º ImportHistory
            import_history.archive_table_name = archive_table_name
            import_history.temp_table_name = None
            # –°—Ç–∞—Ç—É—Å –∏ —Ñ–∞–∑–∞ –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ views.py –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
            import_history.save()
            
            logger.info("[SUCCESS] –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            return True
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–µ –∫–∞–∫ –µ—Å—Ç—å
            logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–∞: {str(e)}")
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–∞: {str(e)}")

def _cleanup_temp_table(temp_table_name):
    """–£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∏ –æ—à–∏–±–∫–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–µ –∏–º–ø–æ—Ä—Ç–∞"""
    if temp_table_name:
        try:
            with connection.cursor() as cursor:
                cursor.execute(f"DROP TABLE IF EXISTS {temp_table_name}")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É {temp_table_name}: {str(e)}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –†–µ–≥–∏—Å—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤, —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ
_RUNNING_IMPORTS = {}

# –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–∞—á–∏ Celery —Å –ø–æ–º–æ—â—å—é –æ–±—ã—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
def process_csv_import_task(csv_data, import_history_id, delimiter, encoding, has_header):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–º–ø–æ—Ä—Ç–∞ CSV –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        csv_data: –ó–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤ base64 –¥–∞–Ω–Ω—ã–µ CSV-—Ñ–∞–π–ª–∞
        import_history_id: ID –∑–∞–ø–∏—Å–∏ ImportHistory
        delimiter: –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å CSV
        encoding: –ö–æ–¥–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞
        has_header: –°–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ CSV –∑–∞–≥–æ–ª–æ–≤–æ–∫
    """
    # –ò–º–∏—Ç–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
    def delay(*args, **kwargs):
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥ —Å—Ä–∞–∑—É –∂–µ, –±–µ–∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏
        return process_csv_import_task_impl(*args, **kwargs)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ delay –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    process_csv_import_task.delay = delay
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É
    return process_csv_import_task_impl(csv_data, import_history_id, delimiter, encoding, has_header)

def process_csv_import_task_impl(csv_data, import_history_id, delimiter, encoding, has_header):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV.
    –ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤ –∞—Ä—Ö–∏–≤–Ω—É—é –∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –Ω–æ–≤—É—é.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏ –∏–º–ø–æ—Ä—Ç–∞
        import_history = ImportHistory.objects.get(id=import_history_id)
        import_history.status = 'processing'
        import_history.save()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º
        archive_table_name = f"subscribers_subscriber_archive_{int(timezone.now().timestamp())}"
        import_history.archive_table_name = archive_table_name
        import_history.save()
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ CSV –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
        raw_lines = csv_data.splitlines()
        processed_lines = []
        current_line = None
        line_number = 0
        id_pattern = re.compile(r'^\s*\d+')  # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å —á–∏—Å–ª–∞ (ID)
        
        # –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤—ã—Ö —Å—Ç—Ä–æ–∫ CSV –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
        sample_rows = []
        for i, line in enumerate(raw_lines[:10]):  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫
            if i == 0 and has_header:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                continue
            if not line.strip():  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                continue
            if id_pattern.match(line.split(delimiter)[0]):  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ - —ç—Ç–æ –∑–∞–ø–∏—Å—å (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å ID)
                parts = line.split(delimiter)
                sample_rows.append(parts)
                if len(parts) > 9:  # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–ª–æ–Ω–∫–∞ –¥–∞—Ç—ã
                    print(f"–ü—Ä–∏–º–µ—Ä –¥–∞—Ç—ã –≤ —Å—Ç—Ä–æ–∫–µ {i+1}: '{parts[9]}'")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º
        if sample_rows:
            print("\n–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã CSV:")
            max_cols = max(len(row) for row in sample_rows)
            for col_idx in range(max_cols):
                non_empty_count = sum(1 for row in sample_rows if col_idx < len(row) and row[col_idx].strip())
                if col_idx == 9:  # –ö–æ–ª–æ–Ω–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
                    print(f"–ö–æ–ª–æ–Ω–∫–∞ {col_idx+1} (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è): {non_empty_count}/{len(sample_rows)} –Ω–µ–ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
                    # –ü—Ä–∏–º–µ—Ä—ã –∑–Ω–∞—á–µ–Ω–∏–π
                    examples = [row[col_idx] for row in sample_rows if col_idx < len(row) and row[col_idx].strip()]
                    if examples:
                        print(f"–ü—Ä–∏–º–µ—Ä—ã –∑–Ω–∞—á–µ–Ω–∏–π: {examples[:5]}")
        
        for line in raw_lines:
            line_number += 1
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            if not line.strip():
                continue
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if line_number == 1 and has_header:
                processed_lines.append(line)
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å ID (—á–∏—Å–ª–∞)
            is_new_record = bool(id_pattern.match(line.split(delimiter)[0]))
            
            if is_new_record:
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
                if current_line is not None:
                    processed_lines.append(current_line)
                # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
                current_line = line
            else:
                # –≠—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–æ–∫–∏
                if current_line is not None:
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–æ–π
                    current_line = current_line + " " + line.strip()
                else:
                    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∏ –æ–Ω–∞ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å ID - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
                    if not has_header or line_number > 1:
                        import_history.error_message = f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Å—Ç—Ä–æ–∫–∞ {line_number} –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å ID –∏ –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏. –°—Ç—Ä–æ–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞."
                        import_history.save()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
        if current_line is not None:
            processed_lines.append(current_line)
        
        # –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        processed_csv_data = "\n".join(processed_lines)
        
        # –ß—Ç–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ CSV-—Ñ–∞–π–ª–∞
        csv_file = io.StringIO(processed_csv_data)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CSV-reader –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–≤—ã—á–µ–∫
        csv_reader = csv.reader(
            csv_file, 
            delimiter=delimiter, 
            quotechar='"', 
            quoting=csv.QUOTE_MINIMAL
        )
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if has_header:
            next(csv_reader, None)
        
        # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        parsed_rows = []
        errors = []
        row_count = 0
        
        for row in csv_reader:
            row_count += 1
            
            if len(row) < 8:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π
                errors.append(f"–°—Ç—Ä–æ–∫–∞ {row_count}: –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π ({len(row)})")
                continue
                
            try:
                # –†–∞–∑–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É CSV
                original_id_str = row[0].strip() if row[0] else None
                original_id = None
                
                if original_id_str:
                    try:
                        original_id = int(original_id_str)
                    except ValueError:
                        errors.append(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≤ —Å—Ç—Ä–æ–∫–µ {row_count}: {original_id_str}")
                
                number = row[1].strip() if len(row) > 1 else ""
                last_name = row[2].strip() if len(row) > 2 else ""
                first_name = row[3].strip() if len(row) > 3 else ""
                middle_name = row[4].strip() if len(row) > 4 else None
                address = row[5].strip() if len(row) > 5 else None
                memo1 = row[6].strip() if len(row) > 6 else None
                memo2 = row[7].strip() if len(row) > 7 else None
                birth_place = row[8].strip() if len(row) > 8 else None
                
                birth_date = None
                if len(row) > 9 and row[9] and row[9].strip():
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–∞—Ç–æ–π
                        from datetime import datetime, date
                        birth_date_str = row[9].strip()
                        
                        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã: '{birth_date_str}' –≤ —Å—Ç—Ä–æ–∫–µ {row_count}")
                        
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º NULL –∑–Ω–∞—á–µ–Ω–∏–µ (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ None)
                        if birth_date_str.upper() == 'NULL':
                            print(f"–ù–∞–π–¥–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ NULL, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º date –∫–∞–∫ None")
                            birth_date = None
                        else:
                            # –î–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º (YYYY-MM-DD 00:00:00.000)
                            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç—Ä–µ–∑–∞–µ–º –≤—Ä–µ–º—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                            if ' ' in birth_date_str:
                                date_part = birth_date_str.split(' ')[0]
                                print(f"–û—Ç–¥–µ–ª–µ–Ω–∞ —á–∞—Å—Ç—å —Å –¥–∞—Ç–æ–π: {date_part}")
                            else:
                                date_part = birth_date_str
                                
                            # –¢–µ–ø–µ—Ä—å —Ä–∞–∑–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å —Å –¥–∞—Ç–æ–π
                            if '-' in date_part:
                                parts = date_part.split('-')
                                if len(parts) == 3:
                                    year = int(parts[0])
                                    month = int(parts[1])
                                    day = int(parts[2])
                                    
                                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞—Ç—ã
                                    if 1 <= day <= 31 and 1 <= month <= 12 and 1900 <= year <= 2100:
                                        try:
                                            birth_date = date(year, month, day)
                                            print(f"–î–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∞: {birth_date}")
                                        except ValueError as ve:
                                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∞—Ç—ã: {ve}")
                                            errors.append(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ '{birth_date_str}' –≤ —Å—Ç—Ä–æ–∫–µ {row_count}: {ve}")
                                    else:
                                        print(f"–ù–µ–≤–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–Ω—è ({day}), –º–µ—Å—è—Ü–∞ ({month}) –∏–ª–∏ –≥–æ–¥–∞ ({year})")
                                        errors.append(f"–ù–µ–≤–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–Ω—è, –º–µ—Å—è—Ü–∞ –∏–ª–∏ –≥–æ–¥–∞ –≤ –¥–∞—Ç–µ '{birth_date_str}' (—Å—Ç—Ä–æ–∫–∞ {row_count})")
                                else:
                                    print(f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π –≤ –¥–∞—Ç–µ: {parts}")
                                    errors.append(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã '{birth_date_str}' –≤ —Å—Ç—Ä–æ–∫–µ {row_count}")
                            else:
                                # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã
                                try:
                                    parsed_date = datetime.strptime(birth_date_str, '%Y-%m-%d %H:%M:%S.%f')
                                    birth_date = parsed_date.date()
                                    print(f"–î–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ strptime: {birth_date}")
                                except ValueError:
                                    try:
                                        # –ü—Ä–æ–±—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç
                                        parsed_date = datetime.strptime(birth_date_str, '%Y-%m-%d')
                                        birth_date = parsed_date.date()
                                        print(f"–î–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ strptime (–ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç): {birth_date}")
                                    except ValueError as ve:
                                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞—Ç—É '{birth_date_str}': {ve}")
                                        errors.append(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞—Ç—É '{birth_date_str}' –≤ —Å—Ç—Ä–æ–∫–µ {row_count}")
                    except Exception as e:
                        errors.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–µ {row_count}: {str(e)}")
                        print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã: {str(e)}")
                
                imsi = row[10].strip() if len(row) > 10 else None
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
                if not last_name or not first_name:
                    errors.append(f"–°—Ç—Ä–æ–∫–∞ {row_count}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (—Ñ–∞–º–∏–ª–∏—è –∏–ª–∏ –∏–º—è)")
                    continue
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
                parsed_rows.append({
                    'original_id': original_id,
                    'number': number,
                    'last_name': last_name,
                    'first_name': first_name,
                    'middle_name': middle_name,
                    'address': address,
                    'memo1': memo1,
                    'memo2': memo2,
                    'birth_place': birth_place,
                    'birth_date': birth_date,
                    'imsi': imsi
                })
                
            except Exception as e:
                errors.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ {row_count}: {str(e)}")
        
        # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É –∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å —á–∏—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        with connection.cursor() as cursor:
            try:
                # 1. –°–æ–∑–¥–∞—ë–º –∞—Ä—Ö–∏–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                cursor.execute(f"""
                    CREATE TABLE {archive_table_name} AS 
                    SELECT * FROM subscribers_subscriber
                """)
                
                # 2. –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É
                cursor.execute("DELETE FROM subscribers_subscriber")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏—Å—Ç–æ—Ä–∏—é –∏–º–ø–æ—Ä—Ç–∞
                import_history.archive_table_name = archive_table_name
                import_history.records_count = len(parsed_rows)
                
                if errors:
                    error_message = "\n".join(errors[:20])
                    if len(errors) > 20:
                        error_message += f"\n... –µ—â—ë {len(errors) - 20} –æ—à–∏–±–æ–∫"
                    import_history.error_message = error_message
                    
                import_history.save()
                
            except Exception as e:
                import_history.status = 'failed'
                import_history.error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
                import_history.save()
                return {"success": False, "error": str(e)}
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        created_count = 0
        failed_count = 0
        
        for record in parsed_rows:
            try:
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                if record['birth_date'] is not None:
                    from datetime import date
                    print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å –¥–∞—Ç–æ–π —Ä–æ–∂–¥–µ–Ω–∏—è: {record['birth_date']} (—Ç–∏–ø: {type(record['birth_date']).__name__})")
                    
                    # –ï—Å–ª–∏ birth_date –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º —Ç–∏–ø–∞ date, —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –µ–≥–æ
                    if not isinstance(record['birth_date'], date):
                        if hasattr(record['birth_date'], 'date'):  # –ï—Å–ª–∏ —ç—Ç–æ datetime
                            record['birth_date'] = record['birth_date'].date()
                            print(f"–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ date: {record['birth_date']}")
                
                # –ö–∞–∂–¥–∞—è –∑–∞–ø–∏—Å—å –≤ —Å–≤–æ–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                with transaction.atomic():
                    new_subscriber = Subscriber(
                        original_id=record['original_id'],
                        number=record['number'],
                        last_name=record['last_name'],
                        first_name=record['first_name'],
                        middle_name=record['middle_name'],
                        address=record['address'],
                        memo1=record['memo1'],
                        memo2=record['memo2'],
                        birth_place=record['birth_place'],
                        birth_date=record['birth_date'],
                        imsi=record['imsi'],
                        import_history=import_history
                    )
                    new_subscriber.save()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å –ª–∏ –¥–∞—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                    if record['birth_date'] is not None:
                        saved_sub = Subscriber.objects.get(pk=new_subscriber.pk)
                        if saved_sub.birth_date is None:
                            print(f"–í–ù–ò–ú–ê–ù–ò–ï: –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å –¥–ª—è –∞–±–æ–Ω–µ–Ω—Ç–∞ {new_subscriber.pk}")
                        else:
                            print(f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ: {saved_sub.birth_date}")
                    
                    created_count += 1
            except Exception as e:
                failed_count += 1
                errors.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {str(e)}")
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–±–æ–Ω–µ–Ω—Ç–∞: {str(e)}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–º–ø–æ—Ä—Ç–∞
        import_history.records_created = created_count
        import_history.records_failed = failed_count
        import_history.status = 'completed'
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–∞—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if errors:
            error_message = "\n".join(errors[:20])
            if len(errors) > 20:
                error_message += f"\n... –µ—â—ë {len(errors) - 20} –æ—à–∏–±–æ–∫"
            import_history.error_message = error_message
            
        import_history.save()
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∞—Ä—Ö–∏–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3
        try:
            print("–ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...")
            with connection.cursor() as cursor:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                cursor.execute("""
                    SELECT table_name 
                    FROM information_schema.tables 
                    WHERE table_name LIKE 'subscribers_subscriber_archive_%'
                    ORDER BY table_name DESC
                """)
                archive_tables = [row[0] for row in cursor.fetchall()]
                print(f"–ù–∞–π–¥–µ–Ω–æ –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü: {len(archive_tables)}")
                
                # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 3 –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã (–≤–∫–ª—é—á–∞—è —Ç–µ–∫—É—â—É—é)
                tables_to_keep = 3
                tables_to_delete = archive_tables[tables_to_keep:]
                
                # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ç–∞–±–ª–∏—Ü—ã
                for table in tables_to_delete:
                    print(f"–£–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–µ–π –∞—Ä—Ö–∏–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã: {table}")
                    cursor.execute(f"DROP TABLE IF EXISTS {table}")
                
                print(f"–£–¥–∞–ª–µ–Ω–æ –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü: {len(tables_to_delete)}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                saved_tables = ", ".join(archive_tables[:tables_to_keep])
                cleanup_info = f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü: {min(tables_to_keep, len(archive_tables))}. –£–¥–∞–ª–µ–Ω–æ: {len(tables_to_delete)}."
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—á–∏—Å—Ç–∫–µ –≤ info_message
                import_history.info_message = cleanup_info
                import_history.save()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—á–∏—Å—Ç–∫–µ –∫ –æ—à–∏–±–∫–∞–º, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                if import_history.error_message:
                    import_history.error_message += f"\n\n{cleanup_info}"
                else:
                    import_history.error_message = cleanup_info
                
                import_history.save()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü: {str(e)}")
            import_history.error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü: {str(e)}"
            import_history.save()
        
        return {
            "success": True,
            "created": created_count,
            "failed": failed_count,
            "total": row_count,
            "archive_table": archive_table_name
        }
        
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–º–ø–æ—Ä—Ç–∞
        try:
            import_history = ImportHistory.objects.get(id=import_history_id)
            import_history.status = 'failed'
            import_history.error_message = f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            import_history.save()
        except:
            pass
        
        return {"success": False, "error": str(e)}

# === –†–ï–ñ–ò–ú –ü–û–¢–û–ö–û–í–û–ì–û (–†–ï–ó–Æ–ú–ò–†–£–ï–ú–û–ì–û) –ò–ú–ü–û–†–¢–ê ===


def _process_record_row(parsed, import_history: ImportHistory, created_failed_acc):
    created_count, failed_count, errors = created_failed_acc
    try:
        # –ü–†–û–í–ï–†–ö–ê –§–õ–ê–ì–û–í –ü–†–Ø–ú–û –ü–ï–†–ï–î –°–û–•–†–ê–ù–ï–ù–ò–ï–ú –ó–ê–ü–ò–°–ò
        import_history.refresh_from_db(fields=['pause_requested', 'cancel_requested'])
        if import_history.cancel_requested:
            # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–∞ –æ—Ç–º–µ–Ω–∞, –ª–æ–≥–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å—á–µ—Ç—á–∏–∫–∏
            logger.info(f"[STOP] –û—Ç–º–µ–Ω–∞ –∏–º–ø–æ—Ä—Ç–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≤ _process_record_row –¥–ª—è –∑–∞–ø–∏—Å–∏ ID={parsed.get('original_id')}")
            return created_count, failed_count, errors
        if import_history.pause_requested:
            # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–∞ –ø–∞—É–∑–∞, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å—á–µ—Ç—á–∏–∫–∏
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ç–∏ —Ñ–ª–∞–≥–∏
            return created_count, failed_count, errors
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—Ç—ã
        if parsed['birth_date'] is not None:
            from datetime import date
            if not isinstance(parsed['birth_date'], date) and hasattr(parsed['birth_date'], 'date'):
                parsed['birth_date'] = parsed['birth_date'].date()

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã –ø–æ–ª–µ–π –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π
        validation_errors = []
        
        if parsed.get('number') and len(parsed['number']) > 20:
            validation_errors.append(f"–ù–æ–º–µ—Ä —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π: {len(parsed['number'])} —Å–∏–º–≤–æ–ª–æ–≤ (–º–∞–∫—Å–∏–º—É–º 20)")
            parsed['number'] = parsed['number'][:20]  # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
            
        if parsed.get('last_name') and len(parsed['last_name']) > 255:
            validation_errors.append(f"–§–∞–º–∏–ª–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è: {len(parsed['last_name'])} —Å–∏–º–≤–æ–ª–æ–≤ (–º–∞–∫—Å–∏–º—É–º 255)")
            parsed['last_name'] = parsed['last_name'][:255]
            
        if parsed.get('first_name') and len(parsed['first_name']) > 255:
            validation_errors.append(f"–ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ: {len(parsed['first_name'])} —Å–∏–º–≤–æ–ª–æ–≤ (–º–∞–∫—Å–∏–º—É–º 255)")
            parsed['first_name'] = parsed['first_name'][:255]
            
        if parsed.get('middle_name') and len(parsed['middle_name']) > 255:
            validation_errors.append(f"–û—Ç—á–µ—Å—Ç–≤–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ: {len(parsed['middle_name'])} —Å–∏–º–≤–æ–ª–æ–≤ (–º–∞–∫—Å–∏–º—É–º 255)")
            parsed['middle_name'] = parsed['middle_name'][:255]
            
        if parsed.get('imsi') and len(parsed['imsi']) > 50:
            validation_errors.append(f"IMSI —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π: {len(parsed['imsi'])} —Å–∏–º–≤–æ–ª–æ–≤ (–º–∞–∫—Å–∏–º—É–º 50)")
            parsed['imsi'] = parsed['imsi'][:50]

        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        if validation_errors:
            logger.warning(f"[WARNING] –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ ID={parsed.get('original_id')}: {validation_errors}")

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        record_data = {
            'original_id': parsed['original_id'],
            'number': _sanitize_text(parsed['number']),
            'last_name': _sanitize_text(parsed['last_name']),
            'first_name': _sanitize_text(parsed['first_name']),
            'middle_name': _sanitize_text(parsed['middle_name']),
            'address': _sanitize_text(parsed['address']),
            'memo1': _sanitize_text(parsed['memo1']),
            'memo2': _sanitize_text(parsed['memo2']),
            'birth_place': _sanitize_text(parsed['birth_place']),
            'birth_date': parsed['birth_date'],
            'imsi': _sanitize_text(parsed['imsi']),
            'import_history_id': import_history.id,
        }
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        _insert_into_temp_table(import_history.temp_table_name, record_data)
        created_count += 1
        
        # –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞
        
    except Exception as e:  # noqa: BLE001 - –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        failed_count += 1
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {str(e)}"
        errors.append(error_msg)
        logger.error(f"[ERROR] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: {error_msg}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        raw_data = f"ID: {parsed.get('original_id', 'N/A')}, –ù–æ–º–µ—Ä: {parsed.get('number', 'N/A')}, –§–ò–û: {parsed.get('last_name', 'N/A')} {parsed.get('first_name', 'N/A')} {parsed.get('middle_name', 'N/A')}, –ê–¥—Ä–µ—Å: {parsed.get('address', 'N/A')}, –î–∞—Ç–∞: {parsed.get('birth_date', 'N/A')}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä raw_data
        raw_data_size = len(raw_data)
        if raw_data_size > 4000:
            logger.warning(f"[WARNING] –ë–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä raw_data –≤ _process_record_row: {raw_data_size} —Å–∏–º–≤–æ–ª–æ–≤")
        
        ImportError.objects.create(
            import_history=import_history,
            import_session_id=import_history.import_session_id,
            row_index=import_history.processed_rows + 1,
            message=error_msg,
            raw_data=raw_data[:5000]  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–æ 5000 —Å–∏–º–≤–æ–ª–æ–≤
        )
    return created_count, failed_count, errors

def _clean_line_for_combining(line):
    """
    –û—á–∏—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –Ω–µ–ø–µ—á–∞—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.
    –£–±–∏—Ä–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã, —Ç–∞–±—É–ª—è—Ü–∏–∏, –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É CSV (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏, –∫–∞–≤—ã—á–∫–∏).
    """
    if not line:
        return ""
    
    # –ó–∞–º–µ–Ω—è–µ–º —Ç–∞–±—É–ª—è—Ü–∏–∏ –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –Ω–∞ –ø—Ä–æ–±–µ–ª—ã (–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏)
    cleaned = re.sub(r'[\t\r\n]+', ' ', line)

    # –£–¥–∞–ª—è–µ–º NUL-—Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è –ë–î/–¥—Ä–∞–π–≤–µ—Ä–æ–º
    cleaned = cleaned.replace('\x00', ' ')
    
    # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
    # –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è CSV, –≥–¥–µ –ø—Ä–æ–±–µ–ª—ã –º–æ–≥—É—Ç –±—ã—Ç—å —á–∞—Å—Ç—å—é –¥–∞–Ω–Ω—ã—Ö
    cleaned = re.sub(r' +', ' ', cleaned)
    
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
    cleaned = cleaned.strip()
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π (–Ω–æ –Ω–µ –≤–Ω—É—Ç—Ä–∏ –∫–∞–≤—ã—á–µ–∫)
    # –≠—Ç–æ —Å–ª–æ–∂–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è, –ø–æ—ç—Ç–æ–º—É –¥–µ–ª–∞–µ–º –±–∞–∑–æ–≤—É—é –æ—á–∏—Å—Ç–∫—É
    cleaned = re.sub(r'\s*,\s*', ',', cleaned)  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ –∑–∞–ø—è—Ç—ã—Ö
    
    return cleaned

def _sanitize_text(value: Optional[str]) -> Optional[str]:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π –≤ –ë–î: —É–¥–∞–ª–µ–Ω–∏–µ NUL –∏ —Ç—Ä–∏–º–º–∏–Ω–≥."""
    if value is None:
        return None
    try:
        return value.replace('\x00', ' ').strip()
    except Exception:
        return value

def _extract_id_from_line(line, delimiter):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—è —Å—Ç—Ä–æ–∫–∏."""
    if not line or not line.strip():
        return None
    
    try:
        first_field = line.split(delimiter)[0].strip()
        if not first_field:
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        id_value = int(first_field)
        if id_value <= 0:
            return None
        
        return id_value
    except (ValueError, IndexError):
        return None

def _is_valid_line(line, delimiter):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω–æ–π (ID + —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä)."""
    if not line or not line.strip():
        return False
    
    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—é
        fields = line.split(delimiter)
        if len(fields) < 2:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ (ID)
        if not _is_valid_id_field(fields[0]):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ç–æ—Ä–æ–µ –ø–æ–ª–µ (—Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä)
        if not _is_valid_phone_field(fields[1]):
            return False
        
        return True
    except Exception:
        return False

def _is_valid_id_field_value(id_value):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ ID –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º."""
    if id_value is None or id_value <= 0:
        return False
    return True

def _is_valid_id_field(field_value):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º ID."""
    if not field_value or not field_value.strip():
        return False
    
    try:
        parsed_id = int(field_value.strip())
        return _is_valid_id_field_value(parsed_id)
    except ValueError:
        return False

def _is_valid_phone_field(field_value):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º."""
    if not field_value or not field_value.strip():
        return False
    
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã, —Å–∫–æ–±–∫–∏ –∏ –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã
    phone = re.sub(r'[\s\-\(\)\+]', '', field_value.strip())
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    if not phone.isdigit():
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É (–æ–±—ã—á–Ω–æ 10-15 —Ü–∏—Ñ—Ä)
    if len(phone) < 10 or len(phone) > 15:
        return False
    
    return True

def _is_valid_csv_line(row_values):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ CSV –≤–∞–ª–∏–¥–Ω–æ–π."""
    if not row_values or len(row_values) < 2:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ (ID)
    if not _is_valid_id_field(row_values[0]):
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ç–æ—Ä–æ–µ –ø–æ–ª–µ (—Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä)
    if not _is_valid_phone_field(row_values[1]):
        return False
    
    return True

def _try_parse_csv_line(line, delimiter):
    """–ü—Ä–æ–±—É–µ—Ç —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ç—Ä–æ–∫—É –∫–∞–∫ CSV –∏ –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª—è."""
    try:
        import csv
        import io
        
        # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –æ—Ç NUL —Å–∏–º–≤–æ–ª–æ–≤
        cleaned_line = line.replace('\x00', ' ')
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –≥–∏–±–∫–∏–π –ø–∞—Ä—Å–µ—Ä CSV
        csv_io = io.StringIO(cleaned_line)
        reader = csv.reader(csv_io, delimiter=delimiter, quotechar='"', quoting=csv.QUOTE_MINIMAL)
        row = next(reader, None)
        
        if row:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º NULL –∑–Ω–∞—á–µ–Ω–∏—è - –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            processed_row = []
            for field in row:
                if field and field.upper() == 'NULL':
                    processed_row.append('')
                else:
                    processed_row.append(field)
            
            return processed_row
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –ø—Ä–æ–±—É–µ–º fallback
        cleaned_line = _clean_line_for_combining(line)
        csv_io = io.StringIO(cleaned_line)
        reader = csv.reader(csv_io, delimiter=delimiter, quotechar='"', quoting=csv.QUOTE_MINIMAL)
        fallback_row = next(reader, None)
        
        if fallback_row:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º NULL –∑–Ω–∞—á–µ–Ω–∏—è –≤ fallback
            processed_row = []
            for field in fallback_row:
                if field and field.upper() == 'NULL':
                    processed_row.append('')
                else:
                    processed_row.append(field)
            
            return processed_row
        
        return None
        
    except Exception as e:
        logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ CSV —Å—Ç—Ä–æ–∫–∏: {str(e)}")
        logger.error(f"[ERROR] –ü—Ä–æ–±–ª–µ–º–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: {line[:200]}")
        return None

# –°—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º

def _try_process_combined_line(combined_line, logical_row_index, delimiter, import_history):
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ CSV –∑–∞–ø–∏—Å—å.
    
    Returns:
        (success, actual_id) - success —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —É—Å–ø–µ—Ö, actual_id - —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π ID –∑–∞–ø–∏—Å–∏
    """
    errors = []
    # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–æ–∫–∏ {logical_row_index}
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
        # –ü–∞—Ä—Å–∏–Ω–≥ CSV —Å—Ç—Ä–æ–∫–∏
        row_values = _try_parse_csv_line(combined_line, delimiter)
        if not row_values:
            logger.error(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ CSV")
            return False, None
        
        # CSV —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª–µ–π
        if len(row_values) < 8:
            logger.error(f"[ERROR] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª–µ–π: {len(row_values)} < 8")
            logger.error(f"[ERROR] –ü—Ä–æ–±–ª–µ–º–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: {combined_line}")
            logger.error(f"[ERROR] –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –ø–æ–ª—è: {row_values}")
            return False, None
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π OK
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π ID
        actual_id = None
        if row_values[0] and row_values[0].strip():
            try:
                actual_id = int(row_values[0].strip())
                # ID –∏–∑–≤–ª–µ—á–µ–Ω
            except ValueError:
                logger.error(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å ID –≤ —á–∏—Å–ª–æ: '{row_values[0]}'")
                return False, None
        
        # –ü–∞—Ä—Å–∏–º –∑–∞–ø–∏—Å—å
        # –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª–µ–π
        parsed = _parse_line_to_record(row_values, logical_row_index, errors)
        if not parsed:
            logger.error(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –ø–æ–ª—è –∑–∞–ø–∏—Å–∏ [ERROR] –ó–∞–ø–∏—Å—å {logical_row_index} –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å")
            logger.error(f"[INFO] –ü—Ä–æ–±–ª–µ–º–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: {combined_line}")
            logger.error(f"[STATS] –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –ø–æ–ª—è: {row_values}")
            return False, None
        
        # –ü–æ–ª—è –∑–∞–ø–∏—Å–∏ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω—ã
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å
        try:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
            created_count, failed_count, errors = _process_record_row(parsed, import_history, (0, 0, errors))
            if failed_count == 0:
                # –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞
                return True, actual_id
            else:
                logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {errors}")
                return False, actual_id
        except Exception as e:
            logger.error(f"[ERROR] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {str(e)}")
            return False, actual_id
            
    except Exception as e:
        logger.error(f"[ERROR] –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ _try_process_combined_line: {str(e)}")
        return False, None

def _parse_line_to_record(row_values, row_count, errors):
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —Å—Ç—Ä–æ–∫ –≤ —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª–µ–π."""
    try:
        # –ú—è–≥—á–µ –æ—Ç–Ω–æ—Å–∏–º—Å—è –∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–ª–µ–π: –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤—ã–≥—Ä—É–∑–æ–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å 10 –ø–æ–ª–µ–π
        if len(row_values) < 8:
            error_msg = f"–°—Ç—Ä–æ–∫–∞ {row_count}: –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π ({len(row_values)})"
            errors.append(error_msg)
            logger.error(f"[ERROR] {error_msg}")
            logger.error(f"[ERROR] –ü—Ä–æ–±–ª–µ–º–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: {row_values}")
            return None
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª–µ–π —Å NULL
        def safe_field(value, default=None):
            if not value or value.upper() == 'NULL':
                return default if default is not None else ''
            return _clean_line_for_combining(value)
        
        original_id = None
        original_id_str = safe_field(row_values[0]) if len(row_values) > 0 else None
        if original_id_str:
            try:
                original_id = int(original_id_str)
            except ValueError:
                errors.append(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≤ —Å—Ç—Ä–æ–∫–µ {row_count}: {original_id_str}")
        
        number = safe_field(row_values[1], "") if len(row_values) > 1 else ""
        last_name = safe_field(row_values[2]) if len(row_values) > 2 else None
        first_name = safe_field(row_values[3]) if len(row_values) > 3 else None
        middle_name = safe_field(row_values[4]) if len(row_values) > 4 else None
        address = safe_field(row_values[5]) if len(row_values) > 5 else None
        memo1 = safe_field(row_values[6]) if len(row_values) > 6 else None
        memo2 = safe_field(row_values[7]) if len(row_values) > 7 else None
        birth_place = safe_field(row_values[8]) if len(row_values) > 8 else None
        # –ò–Ω–¥–µ–∫—Å—ã 9 –∏ 10: birth_date –∏ imsi (–µ—Å–ª–∏ –≤—ã–≥—Ä—É–∑–∫–∞ –±–µ–∑ birth_place, —Å–¥–≤–∏–≥ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è)
        imsi = safe_field(row_values[10]) if len(row_values) > 10 else (
            safe_field(row_values[9]) if len(row_values) > 9 and (row_values[9].isdigit() and len(row_values[9]) >= 10) else None
        )

        # –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
        birth_date = None
        if len(row_values) > 9 and row_values[9]:
            from datetime import datetime, date
            birth_date_str = safe_field(row_values[9])
            if birth_date_str and birth_date_str.upper() != 'NULL':
                if ' ' in birth_date_str:
                    date_part = birth_date_str.split(' ')[0]
                else:
                    date_part = birth_date_str
                if '-' in date_part:
                    parts = date_part.split('-')
                    if len(parts) == 3:
                        year, month, day = int(parts[0]), int(parts[1]), int(parts[2])
                        if 1 <= day <= 31 and 1 <= month <= 12 and 1900 <= year <= 2100:
                            try:
                                birth_date = date(year, month, day)
                            except ValueError as ve:
                                errors.append(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ '{birth_date_str}' –≤ —Å—Ç—Ä–æ–∫–µ {row_count}: {ve}")
                        else:
                            errors.append(f"–ù–µ–≤–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–Ω—è/–º–µ—Å—è—Ü–∞/–≥–æ–¥–∞ –≤ –¥–∞—Ç–µ '{birth_date_str}' (—Å—Ç—Ä–æ–∫–∞ {row_count})")
                    else:
                        errors.append(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã '{birth_date_str}' –≤ —Å—Ç—Ä–æ–∫–µ {row_count}")
                else:
                    try:
                        parsed_date = datetime.strptime(birth_date_str, '%Y-%m-%d %H:%M:%S.%f')
                        birth_date = parsed_date.date()
                    except ValueError:
                        try:
                            parsed_date = datetime.strptime(birth_date_str, '%Y-%m-%d')
                            birth_date = parsed_date.date()
                        except ValueError:
                            errors.append(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞—Ç—É '{birth_date_str}' –≤ —Å—Ç—Ä–æ–∫–µ {row_count}")

        # –†–∞–∑—Ä–µ—à–∞–µ–º –ø—É—Å—Ç—ã–µ –§–ò–û: –≤ –ø—Ä–æ–¥–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è, –∑–∞–ø–æ–ª–Ω–∏–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞–º–∏
        if not last_name:
            last_name = None
        if not first_name:
            first_name = None

        return {
            'original_id': original_id,
            'number': number,
            'last_name': last_name or '',
            'first_name': first_name or '',
            'middle_name': middle_name,
            'address': address,
            'memo1': memo1,
            'memo2': memo2,
            'birth_place': birth_place,
            'birth_date': birth_date,
            'imsi': imsi,
        }
    except Exception as e:  # noqa: BLE001
        errors.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ {row_count}: {str(e)}")
        return None

def _process_csv_lines_with_smart_joining(file_path, delimiter, encoding, import_history, processed_rows_start):
    """
    –ü–æ—Ç–æ–∫–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ CSV –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ–≥–æ —Ñ–∞–π–ª–∞ –≤ –ø–∞–º—è—Ç—å
    —Å ¬´—É–º–Ω—ã–º¬ª —Å–∫–ª–µ–∏–≤–∞–Ω–∏–µ–º —Å—Ç—Ä–æ–∫.

    Returns:
        (created_count, failed_count, last_processed_row)
    """
    created_count = 0
    failed_count = 0
    logical_row_index = processed_rows_start

    file_size = file_path.stat().st_size

    import_history.phase = 'processing'
    import_history.save(update_fields=['phase'])

    def _read_next_non_empty(fh):
        while True:
            raw = fh.readline()
            if not raw:
                return None
            line = _clean_line_for_combining(raw.rstrip('\n\r'))
            if line:
                return line

    with file_path.open('r', encoding=encoding, errors='ignore', newline='') as fh:
        # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
        current_line = _read_next_non_empty(fh)
        is_first_line = True
        
        while current_line is not None:
            if logical_row_index % 500 == 0 and logical_row_index != processed_rows_start:
                import_history.last_heartbeat_at = timezone.now()
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                import_history.records_created = created_count
                import_history.records_failed = failed_count
                import_history.processed_rows = logical_row_index
                import_history.save(update_fields=['last_heartbeat_at', 'records_created', 'records_failed', 'processed_rows'])
                import_history.refresh_from_db(fields=['pause_requested', 'cancel_requested'])
                if import_history.cancel_requested:
                    logger.info(f"[STOP] –ò–º–ø–æ—Ä—Ç {import_history.id} –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                    import_history.status = 'cancelled'
                    import_history.stop_reason = '–û—Ç–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'
                    import_history.phase = 'cancelled'
                    import_history.progress_percent = 0
                    import_history.save()
                    _cleanup_temp_table(import_history.temp_table_name)
                    return created_count, failed_count, logical_row_index
                if import_history.pause_requested:
                    logger.info(f"–ò–º–ø–æ—Ä—Ç {import_history.id} –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–∞—É–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                    import_history.status = 'paused'
                    import_history.stop_reason = '–ü–∞—É–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'
                    import_history.save()
                    while True:
                        import time
                        time.sleep(0.5)
                        import_history.refresh_from_db(fields=['pause_requested', 'cancel_requested'])
                        if import_history.cancel_requested:
                            logger.info(f"[STOP] –ò–º–ø–æ—Ä—Ç {import_history.id} –æ—Ç–º–µ–Ω–µ–Ω –≤–æ –≤—Ä–µ–º—è –ø–∞—É–∑—ã")
                            import_history.status = 'cancelled'
                            import_history.stop_reason = '–û—Ç–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'
                            import_history.phase = 'cancelled'
                            import_history.progress_percent = 0
                            import_history.save()
                            _cleanup_temp_table(import_history.temp_table_name)
                            return created_count, failed_count, logical_row_index
                        if not import_history.pause_requested:
                            logger.info(f"–ò–º–ø–æ—Ä—Ç {import_history.id} –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –ø–∞—É–∑—ã")
                            import_history.status = 'processing'
                            import_history.stop_reason = None
                            import_history.save()
                            break

            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ - –µ—Å–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –±–µ–∑ –æ—à–∏–±–∫–∏
            if not _is_valid_line(current_line, delimiter):
                if is_first_line:
                    # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞ - —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    logger.info(f"[SKIP] –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–≤–µ—Ä–æ—è—Ç–Ω–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫): {current_line[:100]}")
                    current_line = _read_next_non_empty(fh)
                    is_first_line = False
                    continue
                else:
                    # –û–±—ã—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞ - —Å–æ–∑–¥–∞–µ–º –æ—à–∏–±–∫—É
                    logger.error(f"[ERROR] –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {logical_row_index + 1}: {current_line[:200]}")
                    failed_count += 1
                    ImportError.objects.create(
                        import_history=import_history,
                        import_session_id=import_history.import_session_id,
                        row_index=logical_row_index + 1,
                        message="–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ (–Ω–µ—Ç ID/–Ω–æ–º–µ—Ä–∞)",
                        raw_data=current_line[:5000],
                    )
                    current_line = _read_next_non_empty(fh)
                    continue

            combined_line = current_line
            while True:
                pos = fh.tell()
                nxt = _read_next_non_empty(fh)
                if nxt is None:
                    break
                if _is_valid_line(nxt, delimiter):
                    fh.seek(pos)
                    break
                combined_line = _clean_line_for_combining(combined_line + " " + nxt)

            logical_row_index += 1
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –µ—Å–ª–∏ –æ–Ω–∞ –≤–∞–ª–∏–¥–Ω–∞
            if logical_row_index > processed_rows_start:
                success, _ = _try_process_combined_line(
                    combined_line, logical_row_index, delimiter, import_history
                )
                if success:
                    created_count += 1
                else:
                    failed_count += 1
                    logger.error(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç—Ä–æ–∫—É {logical_row_index}: {combined_line[:200]}")
                    ImportError.objects.create(
                        import_history=import_history,
                        import_session_id=import_history.import_session_id,
                        row_index=logical_row_index,
                        message="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—É—é –∑–∞–ø–∏—Å—å",
                        raw_data=combined_line[:5000],
                    )
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            is_first_line = False

            try:
                if logical_row_index % 200 == 0:
                    position = fh.tell()
                    percent = int((position / max(1, file_size)) * 100)
                    if percent != import_history.progress_percent:
                        import_history.progress_percent = min(100, max(0, percent))
                        import_history.processed_rows = logical_row_index
                        import_history.save(update_fields=['progress_percent', 'processed_rows'])
            except Exception:
                pass

            current_line = _read_next_non_empty(fh)

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤
    import_history.records_created = created_count
    import_history.records_failed = failed_count
    import_history.processed_rows = logical_row_index
    import_history.save(update_fields=['records_created', 'records_failed', 'processed_rows'])
    
    return created_count, failed_count, logical_row_index

def _process_single_csv_record(line, logical_row_index, delimiter, import_history, expected_id=None):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É CSV –∑–∞–ø–∏—Å—å.
    
    Returns:
        (created_count, failed_count, actual_id)
    """
    errors = []
    created_count = 0
    failed_count = 0
    actual_id = expected_id
    
    try:
        row_values = _try_parse_csv_line(line, delimiter)
        if row_values:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π ID –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            if row_values[0] and row_values[0].strip():
                try:
                    actual_id = int(row_values[0].strip())
                except ValueError:
                    pass
            
            parsed = _parse_line_to_record(row_values, logical_row_index, errors)
            if parsed:
                try:
                    created_count, failed_count, errors = _process_record_row(parsed, import_history, (created_count, failed_count, errors))
                except Exception as e:
                    failed_count += 1
                    msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å: {str(e)}"
                    errors.append(msg)
                    ImportError.objects.create(
                        import_history=import_history,
                        import_session_id=import_history.import_session_id,
                        row_index=logical_row_index,
                        message=msg,
                        raw_data=line[:5000]  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–æ 5000 —Å–∏–º–≤–æ–ª–æ–≤
                    )
            else:
                # –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
                if errors:
                    failed_count += 1
                    ImportError.objects.create(
                        import_history=import_history,
                        import_session_id=import_history.import_session_id,
                        row_index=logical_row_index,
                        message=errors[-1],
                        raw_data=line[:5000]  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–æ 5000 —Å–∏–º–≤–æ–ª–æ–≤
                    )
    except Exception as e:
        failed_count += 1
        ImportError.objects.create(
            import_history=import_history,
            import_session_id=import_history.import_session_id,
            row_index=logical_row_index,
            message=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏: {str(e)}",
            raw_data=line[:5000]  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–æ 5000 —Å–∏–º–≤–æ–ª–æ–≤
        )
    
    return created_count, failed_count, actual_id

def process_csv_import_stream(import_history_id: int) -> None:
    try:
        """–ü–æ—Ç–æ–∫–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–∑—é–º–µ –ø–æ ImportHistory.processed_rows."""
        import_history = ImportHistory.objects.get(id=import_history_id)
        logger.info(f"[START] –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ {import_history_id}")
        logger.info(f"[STATS] –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {import_history.status}")
        logger.info(f"[FILE] –§–∞–π–ª: {import_history.uploaded_file}")
        
        # –ï—Å–ª–∏ –∏–º–ø–æ—Ä—Ç –±—ã–ª –≤ –ø–∞—É–∑–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–æ–≥–æ –º–µ—Å—Ç–∞, –≥–¥–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å
        if import_history.status == 'paused':
            logger.info(f"[PAUSE] –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç {import_history_id} —Å –ø–æ–∑–∏—Ü–∏–∏ {import_history.processed_rows}")
            import_history.status = 'processing'
            import_history.phase = 'processing'
        else:
            logger.info(f"[NEW] –ù–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
            import_history.status = 'processing'
            import_history.phase = 'initializing'
        
        import_history.save()

        # –ü—É—Ç—å –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        if not import_history.uploaded_file:
            import_history.status = 'failed'
            import_history.error_message = '–ù–µ –Ω–∞–π–¥–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞'
            import_history.save()
            return
        
        file_path = Path(import_history.uploaded_file.path)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not file_path.exists():
            logger.error(f"[ERROR] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            import_history.status = 'failed'
            import_history.error_message = f'–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}'
            import_history.save()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É
        if not os.access(file_path, os.R_OK):
            logger.error(f"[ERROR] –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {file_path}")
            import_history.status = 'failed'
            import_history.error_message = f'–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {file_path}'
            import_history.save()
            return

        logger.info(f"[OK] –§–∞–π–ª –Ω–∞–π–¥–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω: {file_path}")            

        delimiter = import_history.delimiter
        encoding = import_history.encoding or 'utf-8'
        # has_header —É–±—Ä–∞–Ω - —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        import_history.records_count = 0  # –ë—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å –ø–æ –º–µ—Ä–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        import_history.progress_percent = 0
        import_history.save()

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –æ–¥–∏–Ω —Ä–∞–∑
        if not import_history.temp_table_name:
            try:
                logger.info("[BUILD] –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞...")
                import_history.phase = 'creating_temp_table'
                import_history.save()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
                import_history.refresh_from_db(fields=['cancel_requested'])
                if import_history.cancel_requested:
                    logger.info(f"[STOP] –ò–º–ø–æ—Ä—Ç {import_history_id} –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞ —ç—Ç–∞–ø–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã")
                    import_history.status = 'cancelled'
                    import_history.phase = 'cancelled'
                    import_history.stop_reason = '–û—Ç–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'
                    import_history.progress_percent = 0
                    import_history.save()
                    return
                
                temp_table_name = f"subscribers_subscriber_temp_{int(timezone.now().timestamp())}"
                _create_temp_table(temp_table_name)
                import_history.temp_table_name = temp_table_name
                import_history.save()
                logger.info(f"[OK] –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ {temp_table_name} –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
            except Exception as e:  # noqa: BLE001
                logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã: {str(e)}")
                import_history.status = 'failed'
                import_history.error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã: {str(e)}"
                import_history.save()
                return

        id_pattern = re.compile(r'^\s*\d+')
        processed_rows_start = import_history.processed_rows or 0

        created_count = import_history.records_created or 0
        failed_count = import_history.records_failed or 0
        errors: list[str] = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        import_history.refresh_from_db(fields=['cancel_requested'])
        if import_history.cancel_requested:
            logger.info(f"[STOP] –ò–º–ø–æ—Ä—Ç {import_history_id} –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            import_history.status = 'cancelled'
            import_history.phase = 'cancelled'
            import_history.stop_reason = '–û—Ç–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'
            import_history.progress_percent = 0
            import_history.save()
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
            _cleanup_temp_table(import_history.temp_table_name)
            return

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É —Å —É–º–Ω—ã–º —Å–∫–ª–µ–∏–≤–∞–Ω–∏–µ–º —Å—Ç—Ä–æ–∫
        try:
            created_count, failed_count, logical_row_index = _process_csv_lines_with_smart_joining(
                file_path, delimiter, encoding, import_history, processed_rows_start
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            import_history.processed_rows = logical_row_index
            import_history.records_created = created_count
            import_history.records_failed = failed_count
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤
            import_history.records_count = logical_row_index
            import_history.progress_percent = 100
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –∏–º–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω
            import_history.refresh_from_db(fields=['cancel_requested'])
            if import_history.cancel_requested:
                logger.info(f"[STOP] –ò–º–ø–æ—Ä—Ç {import_history_id} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                import_history.status = 'cancelled'
                import_history.phase = 'cancelled'
                import_history.stop_reason = '–û—Ç–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'
                import_history.progress_percent = 0
                import_history.save()
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
                _cleanup_temp_table(import_history.temp_table_name)
                return
            
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É (–±–µ–∑ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏)
            import_history.status = 'temp_completed'
            import_history.phase = 'waiting_finalization'  # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–æ 18 —Å–∏–º–≤–æ–ª–æ–≤
            import_history.progress_percent = 100
            if errors:
                msg = "\n".join(errors[:20])
                if len(errors) > 20:
                    msg += f"\n... –µ—â—ë {len(errors) - 20} –æ—à–∏–±–æ–∫"
                import_history.error_message = msg
            import_history.save()
            logger.info("[SUCCESS] –ò–º–ø–æ—Ä—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω! –û–∂–∏–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—é.")
        except Exception as e:
            logger.error(f"[ERROR] –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–º–ø–æ—Ä—Ç–∞: {str(e)}")
            import_history.status = 'failed'
            import_history.error_message = f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            import_history.save()
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
            _cleanup_temp_table(import_history.temp_table_name)
        finally:
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –æ—á–∏—â–µ–Ω–∞ –ø—Ä–∏ –ª—é–±–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            if import_history.temp_table_name and import_history.status in ['failed', 'cancelled']:
                logger.info(f"[CLEAN] –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã {import_history.temp_table_name}")
                _cleanup_temp_table(import_history.temp_table_name)
            elif import_history.temp_table_name and import_history.status == 'temp_completed':
                # –ï—Å–ª–∏ –∏–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ, –Ω–æ –Ω–µ —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –æ—Å—Ç–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                logger.info(f"[FILE] –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ {import_history.temp_table_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏")
            
            _RUNNING_IMPORTS.pop(import_history_id, None)
            logger.info(f"[FINISH] –ò–º–ø–æ—Ä—Ç {import_history_id} –∑–∞–≤–µ—Ä—à–µ–Ω. –°—Ç–∞—Ç—É—Å: {import_history.status}")
    
    except Exception as e:
        logger.error(f"[ERROR] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ process_csv_import_stream: {str(e)}")
        logger.error(f"[ERROR] –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        import traceback
        logger.error(f"[ERROR] –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–º–ø–æ—Ä—Ç–∞
        try:
            import_history = ImportHistory.objects.get(id=import_history_id)
            import_history.status = 'failed'
            import_history.error_message = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            import_history.save()
        except:
            pass        

def start_import_async(import_history_id: int) -> bool:
    """–°—Ç–∞—Ä—Ç—É–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ –∏–¥—ë—Ç. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª–∏ —Å–µ–π—á–∞—Å."""
    if _RUNNING_IMPORTS.get(import_history_id):
        logger.info(f"–ò–º–ø–æ—Ä—Ç {import_history_id} —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ")
        return False
    
    logger.info(f"–ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç {import_history_id}")
    t = threading.Thread(target=process_csv_import_stream, args=(import_history_id,), daemon=True)
    _RUNNING_IMPORTS[import_history_id] = t
    t.start()
    return True

def is_import_running(import_history_id: int) -> bool:
    t = _RUNNING_IMPORTS.get(import_history_id)
    is_running = t.is_alive() if t else False
    return is_running

# –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–∞—á–∏ Celery –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
def cleanup_old_import_data(days=30):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–∞
    
    Args:
        days (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        
    Returns:
        str: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    try:
        return cleanup_old_import_data_impl(days)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {str(e)}"

def cleanup_old_import_data_impl(days=30):
    """–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á–∏ –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    from django.utils import timezone
    from datetime import timedelta
    
    cutoff_date = timezone.now() - timedelta(days=days)
    
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–º–ø–æ—Ä—Ç–∞
        old_imports = ImportHistory.objects.filter(created_at__lt=cutoff_date)
        count = old_imports.count()
        old_imports.delete()
            
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞
        old_errors = ImportError.objects.filter(created_at__lt=cutoff_date)
        error_count = old_errors.count()
        old_errors.delete()
        
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ {count} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–º–ø–æ—Ä—Ç–∞ –∏ {error_count} –æ—à–∏–±–æ–∫")
        return f"–£—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ: {count} –∑–∞–ø–∏—Å–µ–π –∏–º–ø–æ—Ä—Ç–∞, {error_count} –æ—à–∏–±–æ–∫"
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {str(e)}"

def cleanup_old_archive_tables(keep_count=3):
    """
    –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ keep_count —Ç–∞–±–ª–∏—Ü.
    
    Args:
        keep_count (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏
    """
    from django.db import connection
    
    try:
        with connection.cursor() as cursor:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
            cursor.execute("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_name LIKE 'subscribers_subscriber_archive_%'
                ORDER BY table_name DESC
            """)
            archive_tables = [row[0] for row in cursor.fetchall()]
            
            logger.info(f"[SEARCH] –ù–∞–π–¥–µ–Ω–æ –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü: {len(archive_tables)}")
            if archive_tables:
                logger.info(f"[LIST] –°–ø–∏—Å–æ–∫ –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü: {archive_tables}")
            
            if len(archive_tables) <= keep_count:
                logger.info(f"[OK] –í—Å–µ {len(archive_tables)} –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (–ª–∏–º–∏—Ç: {keep_count})")
                return {
                    "success": True,
                    "total_kept": len(archive_tables),
                    "total_deleted": 0,
                    "message": f"–í—Å–µ {len(archive_tables)} –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (–ª–∏–º–∏—Ç: {keep_count})"
                }
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            tables_to_keep = archive_tables[:keep_count]
            tables_to_delete = archive_tables[keep_count:]
            
            logger.info(f"[SAVE] –¢–∞–±–ª–∏—Ü—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {tables_to_keep}")
            logger.info(f"[TRASH] –¢–∞–±–ª–∏—Ü—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {tables_to_delete}")
            
            # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            deleted_count = 0
            for table in tables_to_delete:
                try:
                    logger.info(f"[TRASH] –£–¥–∞–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É: {table}")
                    cursor.execute(f"DROP TABLE IF EXISTS {table}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω–∞
                    cursor.execute("""
                        SELECT COUNT(*) 
                        FROM information_schema.tables 
                        WHERE table_name = %s
                    """, [table])
                    
                    if cursor.fetchone()[0] == 0:
                        logger.info(f"[OK] –¢–∞–±–ª–∏—Ü–∞ {table} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
                        deleted_count += 1
                    else:
                        logger.warning(f"[WARNING] –¢–∞–±–ª–∏—Ü–∞ {table} –Ω–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞")
                        
                except Exception as table_error:
                    logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã {table}: {str(table_error)}")
            
            logger.info(f"[FINISH] –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {len(tables_to_keep)}, —É–¥–∞–ª–µ–Ω–æ: {deleted_count}")
            
            return {
                "success": True,
                "total_kept": len(tables_to_keep),
                "total_deleted": deleted_count,
                "message": f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {len(tables_to_keep)}, —É–¥–∞–ª–µ–Ω–æ: {deleted_count}"
            }
            
    except Exception as e:
        logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü: {str(e)}")
        return {
            "success": False,
            "error": str(e)
        }

def cleanup_old_archive_tables_task(keep_count=3):
    """
    –ò–º–∏—Ç–∞—Ü–∏—è Celery –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü.
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º delay –∫–∞–∫ –∏–º–∏—Ç–∞—Ü–∏—é Celery
    def delay(keep_count=3):
        return cleanup_old_archive_tables(keep_count)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ delay –∫ —Ñ—É–Ω–∫—Ü–∏–∏
    cleanup_old_archive_tables_task.delay = delay
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É
    return cleanup_old_archive_tables(keep_count)

def list_archive_tables():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞—Ä—Ö–∏–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã.
    
    Returns:
        dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
    """
    from django.db import connection
    
    try:
        with connection.cursor() as cursor:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
            cursor.execute("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_name LIKE 'subscribers_subscriber_archive_%'
                ORDER BY table_name DESC
            """)
            archive_tables = [row[0] for row in cursor.fetchall()]
            
            result = {
                "success": True,
                "total_count": len(archive_tables),
                "tables": []
            }
            
            for table_name in archive_tables:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
                try:
                    cursor.execute("""
                        SELECT COUNT(*) 
                        FROM information_schema.columns 
                        WHERE table_name = %s
                    """, [table_name])
                    column_count = cursor.fetchone()[0]
                except Exception:
                    column_count = "–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞"
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
                try:
                    cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
                    row_count = cursor.fetchone()[0]
                except Exception:
                    row_count = "–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞"
                
                result["tables"].append({
                    "name": table_name,
                    "columns": column_count,
                    "rows": row_count
                })
            
            return result
            
    except Exception as e:
        logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü: {str(e)}")
        return {
            "success": False,
            "error": str(e)
        } 
