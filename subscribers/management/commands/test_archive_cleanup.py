from django.core.management.base import BaseCommand
from subscribers.tasks import list_archive_tables, cleanup_old_archive_tables


class Command(BaseCommand):
    help = '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü'

    def add_arguments(self, parser):
        parser.add_argument(
            '--keep',
            type=int,
            default=3,
            help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 3)'
        )
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ, –±–µ–∑ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è'
        )

    def handle(self, *args, **options):
        keep_count = options['keep']
        dry_run = options['dry_run']

        self.stdout.write(self.style.SUCCESS(f'üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü (—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: {keep_count})'))
        self.stdout.write('=' * 60)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –¥–æ –æ—á–∏—Å—Ç–∫–∏
        before_info = list_archive_tables()
        
        if not before_info['success']:
            self.stdout.write(self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞—Ä—Ö–∏–≤–æ–≤: {before_info["error"]}'))
            return

        self.stdout.write(f'üìã –ù–∞–π–¥–µ–Ω–æ –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü: {before_info["total_count"]}')
        
        if before_info['tables']:
            self.stdout.write('\nüìä –î–µ—Ç–∞–ª–∏ –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü:')
            for table in before_info['tables']:
                self.stdout.write(f'  üìã {table["name"]}')
                self.stdout.write(f'     –ö–æ–ª–æ–Ω–æ–∫: {table["columns"]}, –°—Ç—Ä–æ–∫: {table["rows"]}')
        else:
            self.stdout.write('‚ÑπÔ∏è –ê—Ä—Ö–∏–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
            return

        if before_info['total_count'] <= keep_count:
            self.stdout.write(self.style.WARNING(f'\n‚ö†Ô∏è –í—Å–µ {before_info["total_count"]} —Ç–∞–±–ª–∏—Ü –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (–ª–∏–º–∏—Ç: {keep_count})'))
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã
        tables_to_delete = before_info['tables'][keep_count:]
        tables_to_keep = before_info['tables'][:keep_count]

        self.stdout.write(f'\nüíæ –¢–∞–±–ª–∏—Ü—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ({len(tables_to_keep)}):')
        for table in tables_to_keep:
            self.stdout.write(f'  ‚úÖ {table["name"]}')

        self.stdout.write(f'\nüóëÔ∏è –¢–∞–±–ª–∏—Ü—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è ({len(tables_to_delete)}):')
        for table in tables_to_delete:
            self.stdout.write(f'  ‚ùå {table["name"]}')

        if dry_run:
            self.stdout.write(self.style.WARNING('\nüîç –†–ï–ñ–ò–ú –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–û–ì–û –ü–†–û–°–ú–û–¢–†–ê - –Ω–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª—è–µ—Ç—Å—è'))
            return

        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É
        self.stdout.write(f'\nüöÄ –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É...')
        result = cleanup_old_archive_tables(keep_count)

        if result['success']:
            self.stdout.write(self.style.SUCCESS(f'‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!'))
            self.stdout.write(f'   –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {result["total_kept"]}')
            self.stdout.write(f'   –£–¥–∞–ª–µ–Ω–æ: {result["total_deleted"]}')
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
            after_info = list_archive_tables()
            if after_info['success']:
                self.stdout.write(f'\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—á–∏—Å—Ç–∫–∏:')
                self.stdout.write(f'   –î–æ –æ—á–∏—Å—Ç–∫–∏: {before_info["total_count"]} —Ç–∞–±–ª–∏—Ü')
                self.stdout.write(f'   –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {after_info["total_count"]} —Ç–∞–±–ª–∏—Ü')
                
                if after_info['tables']:
                    self.stdout.write(f'\nüìã –û—Å—Ç–∞–≤—à–∏–µ—Å—è —Ç–∞–±–ª–∏—Ü—ã:')
                    for table in after_info['tables']:
                        self.stdout.write(f'  üìã {table["name"]}')
        else:
            self.stdout.write(self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {result["error"]}'))
